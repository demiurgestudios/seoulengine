/**
 * \file FalconRenderOcclusionOptimizer.h
 * This render optimizer consumes the flattened scene
 * graph (generated by the Poser) and optimizes it by
 * - use a software coverage rasterizer to detect
 *   occlusion and avoid submission of hidden nodes.
 *
 * Copyright (c) Demiurge Studios, Inc.
 * 
 * This source code is licensed under the MIT license.
 * Full license details can be found in the LICENSE file
 * in the root directory of this source tree.
 */

#pragma once
#ifndef FALCON_RENDER_OCCLUSION_OPTIMIZER_H
#define FALCON_RENDER_OCCLUSION_OPTIMIZER_H

#include "FalconRenderCommand.h"
#include "Prereqs.h"
#include "Vector.h"

namespace Seoul::Falcon
{

namespace Render
{

/**
 * The OcclusionOptimizer consumes an input render
 * buffer and optimizes it to maximize
 * batch sizes and eliminate draw
 * calls that do not contribute to
 * the final output.
 */
class OcclusionOptimizer SEOUL_SEALED
{
public:
	OcclusionOptimizer();
	~OcclusionOptimizer();

	// Reorder and prune the command stream in rBuffer
	// to maximize batch sizes and reduce draw call
	// overhead.
	void Optimize(Falcon::Render::CommandBuffer& rBuffer);

private:
	/**
	 * Bucketing plus a simple heuristic for merging to reduce the number of occluders
	 * checked.
	 */
	static const UInt32 kuBuckets = 8u;

	typedef Vector<Falcon::Rectangle, MemoryBudgets::Falcon> Rectangles;

	struct Bucket SEOUL_SEALED
	{
		Rectangle m_Merged;
		Rectangles m_vRectangles;

		Bucket()
			: m_Merged(Rectangle::InverseMax())
			, m_vRectangles()
		{
		}

		void Reset()
		{
			m_Merged = Rectangle::InverseMax();
			m_vRectangles.Clear();
		}
	};
	typedef FixedArray<Bucket, kuBuckets> Buckets;
	
	typedef Vector<Bool, MemoryBudgets::Falcon> Occluded;
	typedef Vector<Int16, MemoryBudgets::Falcon> Scissors;

	Buckets m_aBuckets;
	Occluded m_vbOccluded;
	Scissors m_vScissors;

	Bool IsOccluded(const Rectangle& rect) const;
	void MergeOccluder(const Rectangle& rect);

	SEOUL_DISABLE_COPY(OcclusionOptimizer);
}; // class OcclusionOptimizer

} // namespace Render

} // namespace Seoul::Falcon

#endif // include guard
