/**
 * \file ReflectionMethodBinderInternal.h
 * \brief Internal header file used as part of a series of
 * recursive header includes to generate all the variations of
 * method binding. This is used to implement generation of
 * concrete definitions when a SEOUL_METHOD*() macro is
 * applied to a reflection type definition.
 *
 * Copyright (c) Demiurge Studios, Inc.
 * 
 * This source code is licensed under the MIT license.
 * Full license details can be found in the LICENSE file
 * in the root directory of this source tree.
 */

#ifndef REFLECTION_METHOD_BINDER_H
#error ReflectionMethodBinderInternal.h should only be included by ReflectionMethodBinder.h
#endif

#if !defined(SEOUL_METHOD_VARIATION_ARGC) || !defined(SEOUL_METHOD_VARIATION_PARAMS) || !defined(SEOUL_METHOD_VARIATION_ARGS) || !defined(SEOUL_METHOD_VARIATION_T_ARGS)  || !defined(SEOUL_METHOD_VARIATION_T)
#   error "Please define all necessary macros before including this file."
#endif

#if (0 == SEOUL_METHOD_VARIATION_ARGC)
#define SEOUL_METHOD_VARIATION_COMMA
#else
#define SEOUL_METHOD_VARIATION_COMMA ,
#endif

#define SEOUL_METHOD_VARIATION_FUNC_NAME SEOUL_CONCAT(SEOUL_METHOD_VARIATION_PREFIX, Function)
#define SEOUL_METHOD_VARIATION_CONST_NAME SEOUL_CONCAT(SEOUL_METHOD_VARIATION_PREFIX, ConstMethod)
#define SEOUL_METHOD_VARIATION_NAME SEOUL_CONCAT(SEOUL_METHOD_VARIATION_PREFIX, NonConstMethod)
#define SEOUL_METHOD_VARIATION_BINDER_NAME SEOUL_CONCAT(SEOUL_METHOD_VARIATION_NAME, Binder)

template <typename C, typename R SEOUL_METHOD_VARIATION_COMMA SEOUL_METHOD_VARIATION_T>
class SEOUL_METHOD_VARIATION_BINDER_NAME
{
public:
	template <typename CLASS_SCOPE, R (C::*M)(SEOUL_METHOD_VARIATION_T_ARGS), size_t zStringArrayLengthInBytes>
	SEOUL_METHOD_VARIATION_NAME<
		C,
		R SEOUL_METHOD_VARIATION_COMMA
		SEOUL_METHOD_VARIATION_T_ARGS,
		M>* Apply(Byte const (&sName)[zStringArrayLengthInBytes])
	{
		return SEOUL_NEW(MemoryBudgets::Reflection) SEOUL_METHOD_VARIATION_NAME<
			C,
			R SEOUL_METHOD_VARIATION_COMMA
			SEOUL_METHOD_VARIATION_T_ARGS,
			M>(sName);
	}


	template <typename CLASS_SCOPE, R (C::*M)(SEOUL_METHOD_VARIATION_T_ARGS) const, size_t zStringArrayLengthInBytes>
	SEOUL_METHOD_VARIATION_CONST_NAME<
		C,
		R SEOUL_METHOD_VARIATION_COMMA
		SEOUL_METHOD_VARIATION_T_ARGS,
		M>* Apply(Byte const (&sName)[zStringArrayLengthInBytes])
	{
		return SEOUL_NEW(MemoryBudgets::Reflection) SEOUL_METHOD_VARIATION_CONST_NAME<
			C,
			R SEOUL_METHOD_VARIATION_COMMA
			SEOUL_METHOD_VARIATION_T_ARGS,
			M>(sName);
	}
}; // class SEOUL_METHOD_VARIATION_BINDER_NAME

template <typename R SEOUL_METHOD_VARIATION_COMMA SEOUL_METHOD_VARIATION_T>
class SEOUL_METHOD_VARIATION_BINDER_NAME<void, R SEOUL_METHOD_VARIATION_COMMA SEOUL_METHOD_VARIATION_T_ARGS>
{
public:
	template <typename CLASS_SCOPE, R (*F)(SEOUL_METHOD_VARIATION_T_ARGS), size_t zStringArrayLengthInBytes>
	SEOUL_METHOD_VARIATION_FUNC_NAME<
		CLASS_SCOPE,
		R SEOUL_METHOD_VARIATION_COMMA
		SEOUL_METHOD_VARIATION_T_ARGS,
		F>* Apply(Byte const (&sName)[zStringArrayLengthInBytes])
	{
		return SEOUL_NEW(MemoryBudgets::Reflection) SEOUL_METHOD_VARIATION_FUNC_NAME<
			CLASS_SCOPE,
			R SEOUL_METHOD_VARIATION_COMMA
			SEOUL_METHOD_VARIATION_T_ARGS,
			F>(sName);
	}
}; // class SEOUL_METHOD_VARIATION_BINDER_NAME

template <typename C, typename R SEOUL_METHOD_VARIATION_COMMA SEOUL_METHOD_VARIATION_T>
static inline SEOUL_METHOD_VARIATION_BINDER_NAME<C, R SEOUL_METHOD_VARIATION_COMMA SEOUL_METHOD_VARIATION_T_ARGS> Bind(R (C::*M)(SEOUL_METHOD_VARIATION_T_ARGS))
{
	return SEOUL_METHOD_VARIATION_BINDER_NAME<C, R SEOUL_METHOD_VARIATION_COMMA SEOUL_METHOD_VARIATION_T_ARGS>();
}

template <typename C, typename R SEOUL_METHOD_VARIATION_COMMA SEOUL_METHOD_VARIATION_T>
static inline SEOUL_METHOD_VARIATION_BINDER_NAME<C, R SEOUL_METHOD_VARIATION_COMMA SEOUL_METHOD_VARIATION_T_ARGS> Bind(R (C::*M)(SEOUL_METHOD_VARIATION_T_ARGS) const)
{
	return SEOUL_METHOD_VARIATION_BINDER_NAME<C, R SEOUL_METHOD_VARIATION_COMMA SEOUL_METHOD_VARIATION_T_ARGS>();
}

template <typename R SEOUL_METHOD_VARIATION_COMMA SEOUL_METHOD_VARIATION_T>
static inline SEOUL_METHOD_VARIATION_BINDER_NAME<void, R SEOUL_METHOD_VARIATION_COMMA SEOUL_METHOD_VARIATION_T_ARGS> Bind(R (*F)(SEOUL_METHOD_VARIATION_T_ARGS))
{
	return SEOUL_METHOD_VARIATION_BINDER_NAME<void, R SEOUL_METHOD_VARIATION_COMMA SEOUL_METHOD_VARIATION_T_ARGS>();
}

#undef SEOUL_METHOD_VARIATION_BINDER_NAME
#undef SEOUL_METHOD_VARIATION_NAME
#undef SEOUL_METHOD_VARIATION_CONST_NAME
#undef SEOUL_METHOD_VARIATION_FUNC_NAME

#undef SEOUL_METHOD_VARIATION_COMMA

#undef SEOUL_METHOD_VARIATION_TYPE_IDS
#undef SEOUL_METHOD_VARIATION_PREFIX
#undef SEOUL_METHOD_VARIATION_PARAMS
#undef SEOUL_METHOD_VARIATION_ARGS
#undef SEOUL_METHOD_VARIATION_T_ARGS
#undef SEOUL_METHOD_VARIATION_T
#undef SEOUL_METHOD_VARIATION_ARGC
