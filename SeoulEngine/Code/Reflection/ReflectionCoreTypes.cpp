/**
 * \file ReflectionCoreTypes.cpp
 * \brief Implements reflection for most types in the SeoulEngine Core project,
 * since Reflection depends on Core and not vice versa.
 *
 * Copyright (c) Demiurge Studios, Inc.
 * 
 * This source code is licensed under the MIT license.
 * Full license details can be found in the LICENSE file
 * in the root directory of this source tree.
 */

#include "Atomic32.h"
#include "Color.h"
#include "Compress.h"
#include "CookDatabase.h"
#include "ContentKey.h"
#include "DataStore.h"
#include "FileChangeNotifier.h"
#include "FilePath.h"
#include "Frustum.h"
#include "HashFunctions.h"
#include "HtmlTypes.h"
#include "Latch.h"
#include "LinearCurve.h"
#include "Logger.h"
#include "Matrix2x3.h"
#include "Matrix4D.h"
#include "NamedType.h"
#include "PackageFileSystem.h"
#include "PixelFormat.h"
#include "Plane.h"
#include "PseudoRandom.h"
#include "Quaternion.h"
#include "ReflectionCoreTemplateTypes.h"
#include "ReflectionDefine.h"
#include "ReflectionLinearCurve.h"
#include "SaveLoadResult.h"
#include "SaveLoadUtil.h"
#include "SeoulHString.h"
#include "SeoulString.h"
#include "SeoulTime.h"
#include "SeoulUUID.h"
#include "StandardVertex2D.h"
#include "Ternary.h"
#include "Thread.h"
#include "UnsafeBuffer.h"
#include "VmStats.h"

namespace Seoul
{

// Types
SEOUL_TYPE(void, TypeFlags::kDisableNew | TypeFlags::kDisableDelete);
SEOUL_TYPE(Bool);
SEOUL_TYPE(char);
SEOUL_TYPE(std::nullptr_t, TypeFlags::kDisableNew);
#if !SEOUL_PLATFORM_LINUX && (SEOUL_PLATFORM_32 || !SEOUL_PLATFORM_ANDROID)
SEOUL_TYPE(long);
SEOUL_TYPE(unsigned long);
#else
SEOUL_TYPE(long long);
#endif

SEOUL_TYPE(Atomic32);
SEOUL_TYPE(Double);
SEOUL_TYPE(Float);
SEOUL_TYPE(Int8);
SEOUL_TYPE(Int16);
SEOUL_TYPE(Int32);
SEOUL_TYPE(Int64);
SEOUL_TYPE(UInt8);
SEOUL_TYPE(UInt16);
SEOUL_TYPE(UInt32);
SEOUL_TYPE(UInt64);

SEOUL_BEGIN_TYPE(AABB)
	SEOUL_PROPERTY_N("Min", m_vMin)
	SEOUL_PROPERTY_N("Max", m_vMax)
SEOUL_END_TYPE()

SEOUL_BEGIN_TYPE(Color4)
	SEOUL_PROPERTY(R)
	SEOUL_PROPERTY(G)
	SEOUL_PROPERTY(B)
	SEOUL_PROPERTY(A)
SEOUL_END_TYPE()

SEOUL_BEGIN_TYPE(ColorAdd)
	SEOUL_PROPERTY_N("R", m_R)
	SEOUL_PROPERTY_N("G", m_G)
	SEOUL_PROPERTY_N("B", m_B)
	SEOUL_PROPERTY_N("BlendingFactor", m_BlendingFactor)
SEOUL_END_TYPE()

SEOUL_BEGIN_TYPE(ColorARGBu8)
	SEOUL_PROPERTY_N("R", m_R)
	SEOUL_PROPERTY_N("G", m_G)
	SEOUL_PROPERTY_N("B", m_B)
	SEOUL_PROPERTY_N("A", m_A)
SEOUL_END_TYPE()

SEOUL_BEGIN_TYPE(CookSource)
	SEOUL_PROPERTY_N("FilePath", m_FilePath)
	SEOUL_PROPERTY_N("Directory", m_bDirectory)
	SEOUL_PROPERTY_N("DebugOnly", m_bDebugOnly)
SEOUL_END_TYPE()

SEOUL_BEGIN_TYPE(ContentKey)
	SEOUL_PROPERTY_PAIR_N("FilePath", GetFilePath, SetFilePath)
	SEOUL_PROPERTY_PAIR_N("Data", GetData, SetData)
SEOUL_END_TYPE()

SEOUL_TYPE(DataNode);

SEOUL_BEGIN_ENUM(DataNode::Type)
	SEOUL_ENUM_N("Null", DataNode::kNull)
	SEOUL_ENUM_N("Boolean", DataNode::kBoolean)
	SEOUL_ENUM_N("UInt32", DataNode::kUInt32)
	SEOUL_ENUM_N("Int32Big", DataNode::kInt32Big)
	SEOUL_ENUM_N("Int32Small", DataNode::kInt32Small)
	SEOUL_ENUM_N("Float31", DataNode::kFloat31)
	SEOUL_ENUM_N("Float32", DataNode::kFloat32)
	SEOUL_ENUM_N("FilePath", DataNode::kFilePath)
	SEOUL_ENUM_N("Table", DataNode::kTable)
	SEOUL_ENUM_N("Array", DataNode::kArray)
	SEOUL_ENUM_N("String", DataNode::kString)
	SEOUL_ENUM_N("Int64", DataNode::kInt64)
	SEOUL_ENUM_N("UInt64", DataNode::kUInt64)
SEOUL_END_ENUM()

SEOUL_TYPE(DataStore, TypeFlags::kDisableCopy);

SEOUL_BEGIN_ENUM(ELatchStatus)
	SEOUL_ENUM_N("LatchNew", eLatchNew)
	SEOUL_ENUM_N("LatchOpen", eLatchOpen)
	SEOUL_ENUM_N("LatchClosed", eLatchClosed)
	SEOUL_ENUM_N("LatchError", eLatchError)
SEOUL_END_ENUM()

SEOUL_BEGIN_ENUM(FileChangeNotifier::FileEvent)
	SEOUL_ENUM_N("Unknown", FileChangeNotifier::kUnknown)
	SEOUL_ENUM_N("Added", FileChangeNotifier::kAdded)
	SEOUL_ENUM_N("Removed", FileChangeNotifier::kRemoved)
	SEOUL_ENUM_N("Modified", FileChangeNotifier::kModified)
	SEOUL_ENUM_N("Renamed", FileChangeNotifier::kRenamed)
SEOUL_END_ENUM()

SEOUL_BEGIN_ENUM(FileType)
	SEOUL_ENUM_N("Unknown", FileType::kUnknown)
	SEOUL_ENUM_N("Animation2D", FileType::kAnimation2D)
	SEOUL_ENUM_N("Csv", FileType::kCsv)
	SEOUL_ENUM_N("Effect", FileType::kEffect)
	SEOUL_ENUM_N("EffectHeader", FileType::kEffectHeader)
	SEOUL_ENUM_N("Exe", FileType::kExe)
	SEOUL_ENUM_N("Font", FileType::kFont)
	SEOUL_ENUM_N("FxBank", FileType::kFxBank)
	SEOUL_ENUM_N("Html", FileType::kHtml)
	SEOUL_ENUM_N("Json", FileType::kJson)
	SEOUL_ENUM_N("PEMCertificate", FileType::kPEMCertificate)
	SEOUL_ENUM_N("Protobuf", FileType::kProtobuf)
	SEOUL_ENUM_N("SaveGame", FileType::kSaveGame)
	SEOUL_ENUM_N("SceneAsset", FileType::kSceneAsset)
	SEOUL_ENUM_N("ScenePrefab", FileType::kScenePrefab)
	SEOUL_ENUM_N("Script", FileType::kScript)
	SEOUL_ENUM_N("SoundBank", FileType::kSoundBank)
	SEOUL_ENUM_N("SoundProject", FileType::kSoundProject)
	SEOUL_ENUM_N("Texture0", FileType::kTexture0)
	SEOUL_ENUM_N("Texture1", FileType::kTexture1)
	SEOUL_ENUM_N("Texture2", FileType::kTexture2)
	SEOUL_ENUM_N("Texture3", FileType::kTexture3)
	SEOUL_ENUM_N("Texture4", FileType::kTexture4)
	SEOUL_ENUM_N("Text", FileType::kText)
	SEOUL_ENUM_N("UIMovie", FileType::kUIMovie)
	SEOUL_ENUM_N("Wav", FileType::kWav)
	SEOUL_ENUM_N("Xml", FileType::kXml)
	SEOUL_ENUM_N("ScriptProject", FileType::kScriptProject)
	SEOUL_ENUM_N("Cs", FileType::kCs)
	SEOUL_ENUM_N("Video", FileType::kVideo)
SEOUL_END_ENUM()

SEOUL_BEGIN_ENUM(GameDirectory)
	SEOUL_ENUM_N("Unknown", GameDirectory::kUnknown)
	SEOUL_ENUM_N("Config", GameDirectory::kConfig)
	SEOUL_ENUM_N("Content", GameDirectory::kContent)
	SEOUL_ENUM_N("Log", GameDirectory::kLog)
	SEOUL_ENUM_N("Save", GameDirectory::kSave)
	SEOUL_ENUM_N("ToolsBin", GameDirectory::kToolsBin)
	SEOUL_ENUM_N("Videos", GameDirectory::kVideos)
SEOUL_END_ENUM()

SEOUL_BEGIN_TYPE(FilePath)
	// Script hooks.
	SEOUL_METHOD_N("__eq", operator==)
	SEOUL_METHOD_N("__lt", operator<)
	SEOUL_METHOD_N("__tostring", ToSerializedUrl)
	SEOUL_METHOD(GetDirectory)
	SEOUL_METHOD(GetRelativeFilenameWithoutExtension)
	SEOUL_METHOD(GetAbsoluteFilename)
	SEOUL_METHOD(SetDirectory)
	SEOUL_METHOD(GetType)
	SEOUL_METHOD(SetType)
	SEOUL_METHOD(ToSerializedUrl)
	SEOUL_METHOD(ToString)
	SEOUL_METHOD(CreateConfigFilePath)
	SEOUL_METHOD(IsValid)
	SEOUL_METHOD(CreateContentFilePath)
SEOUL_END_TYPE()

SEOUL_BEGIN_ENUM(FrustumTestResult)
	SEOUL_ENUM_N("Contains", FrustumTestResult::kContains)
	SEOUL_ENUM_N("Intersects", FrustumTestResult::kIntersects)
	SEOUL_ENUM_N("Disjoint", FrustumTestResult::kDisjoint)
SEOUL_END_ENUM()

SEOUL_BEGIN_ENUM(HtmlAlign)
	SEOUL_ENUM_N("Left", HtmlAlign::kLeft)
	SEOUL_ENUM_N("Right", HtmlAlign::kRight)
	SEOUL_ENUM_N("Center", HtmlAlign::kCenter)
	SEOUL_ENUM_N("Justify", HtmlAlign::kJustify)
SEOUL_END_ENUM()

SEOUL_BEGIN_ENUM(HtmlImageAlign)
	SEOUL_ENUM_N("Top", HtmlImageAlign::kTop)
	SEOUL_ENUM_N("Middle", HtmlImageAlign::kMiddle)
	SEOUL_ENUM_N("Bottom", HtmlImageAlign::kBottom)
	SEOUL_ENUM_N("Left", HtmlImageAlign::kLeft)
	SEOUL_ENUM_N("Right", HtmlImageAlign::kRight)
SEOUL_END_ENUM()

SEOUL_BEGIN_ENUM(HtmlTag)
	SEOUL_ENUM_N("unknown", HtmlTag::kUnknown)
	SEOUL_ENUM_N("b", HtmlTag::kB)
	SEOUL_ENUM_N("br", HtmlTag::kBr)
	SEOUL_ENUM_N("font", HtmlTag::kFont)
	SEOUL_ENUM_N("i", HtmlTag::kI)
	SEOUL_ENUM_N("img", HtmlTag::kImg)
	SEOUL_ENUM_N("a", HtmlTag::kLink)
	SEOUL_ENUM_N("p", HtmlTag::kP)
	SEOUL_ENUM_N("root", HtmlTag::kRoot)
	SEOUL_ENUM_N("textchunk", HtmlTag::kTextChunk)
	SEOUL_ENUM_N("vertical_centered", HtmlTag::kVerticalCentered)
SEOUL_END_ENUM()

SEOUL_BEGIN_ENUM(LoggerChannel)
	SEOUL_ENUM_N("Default", LoggerChannel::Default)
	SEOUL_ENUM_N("Analytics", LoggerChannel::Analytics)
	SEOUL_ENUM_N("Animation", LoggerChannel::Animation)
	SEOUL_ENUM_N("Assertion", LoggerChannel::Assertion)
	SEOUL_ENUM_N("Audio", LoggerChannel::Audio)
	SEOUL_ENUM_N("AudioEvents", LoggerChannel::AudioEvents)
	SEOUL_ENUM_N("Auth", LoggerChannel::Auth)
	SEOUL_ENUM_N("Automation", LoggerChannel::Automation)
	SEOUL_ENUM_N("Chat", LoggerChannel::Chat)
	SEOUL_ENUM_N("Commerce", LoggerChannel::Commerce)
	SEOUL_ENUM_N("Cooking", LoggerChannel::Cooking)
	SEOUL_ENUM_N("Core", LoggerChannel::Core)
	SEOUL_ENUM_N("Engine", LoggerChannel::Engine)
	SEOUL_ENUM_N("FailedGotoLabel", LoggerChannel::FailedGotoLabel)
	SEOUL_ENUM_N("FileIO", LoggerChannel::FileIO)
	SEOUL_ENUM_N("HTTP", LoggerChannel::HTTP)
	SEOUL_ENUM_N("Input", LoggerChannel::Input)
	SEOUL_ENUM_N("Loading", LoggerChannel::Loading)
	SEOUL_ENUM_N("Localization", LoggerChannel::Localization)
	SEOUL_ENUM_N("LocalizationWarning", LoggerChannel::LocalizationWarning)
	SEOUL_ENUM_N("Network", LoggerChannel::Network)
	SEOUL_ENUM_N("Notification", LoggerChannel::Notification)
	SEOUL_ENUM_N("Performance", LoggerChannel::Performance)
	SEOUL_ENUM_N("Physics", LoggerChannel::Physics)
	SEOUL_ENUM_N("Render", LoggerChannel::Render)
	SEOUL_ENUM_N("Script", LoggerChannel::Script)
	SEOUL_ENUM_N("Server", LoggerChannel::Server)
	SEOUL_ENUM_N("State", LoggerChannel::State)
	SEOUL_ENUM_N("Tracking", LoggerChannel::Tracking)
	SEOUL_ENUM_N("TransformsErrors", LoggerChannel::TransformsErrors)
	SEOUL_ENUM_N("TransformsWarnings", LoggerChannel::TransformsWarnings)
	SEOUL_ENUM_N("TriggersAndEvents", LoggerChannel::TriggersAndEvents)
	SEOUL_ENUM_N("UI", LoggerChannel::UI)
	SEOUL_ENUM_N("UIDebug", LoggerChannel::UIDebug)
	SEOUL_ENUM_N("UnitTest", LoggerChannel::UnitTest)
	SEOUL_ENUM_N("Video", LoggerChannel::Video)
	SEOUL_ENUM_N("Warning", LoggerChannel::Warning)
SEOUL_END_ENUM()

SEOUL_BEGIN_ENUM(LZ4CompressionLevel)
	SEOUL_ENUM_N("Best", LZ4CompressionLevel::kBest)
	SEOUL_ENUM_N("Fastest", LZ4CompressionLevel::kFastest)
	SEOUL_ENUM_N("Normal", LZ4CompressionLevel::kNormal)
SEOUL_END_ENUM()

SEOUL_BEGIN_TYPE(Matrix2D)
	SEOUL_PROPERTY(M00)
	SEOUL_PROPERTY(M10)
	SEOUL_PROPERTY(M01)
	SEOUL_PROPERTY(M11)
SEOUL_END_TYPE()

SEOUL_BEGIN_TYPE(Matrix2x3)
	SEOUL_PROPERTY(M00)
	SEOUL_PROPERTY(M10)
	SEOUL_PROPERTY(M01)
	SEOUL_PROPERTY(M11)
	SEOUL_PROPERTY(M02)
	SEOUL_PROPERTY(M12)
SEOUL_END_TYPE()

SEOUL_BEGIN_TYPE(Matrix3D)
	SEOUL_PROPERTY(M00)
	SEOUL_PROPERTY(M01)
	SEOUL_PROPERTY(M02)
	SEOUL_PROPERTY(M10)
	SEOUL_PROPERTY(M11)
	SEOUL_PROPERTY(M12)
	SEOUL_PROPERTY(M20)
	SEOUL_PROPERTY(M21)
	SEOUL_PROPERTY(M22)
SEOUL_END_TYPE()

SEOUL_BEGIN_TYPE(Matrix4D)
	SEOUL_PROPERTY(M00)
	SEOUL_PROPERTY(M01)
	SEOUL_PROPERTY(M02)
	SEOUL_PROPERTY(M03)
	SEOUL_PROPERTY(M10)
	SEOUL_PROPERTY(M11)
	SEOUL_PROPERTY(M12)
	SEOUL_PROPERTY(M13)
	SEOUL_PROPERTY(M20)
	SEOUL_PROPERTY(M21)
	SEOUL_PROPERTY(M22)
	SEOUL_PROPERTY(M23)
	SEOUL_PROPERTY(M30)
	SEOUL_PROPERTY(M31)
	SEOUL_PROPERTY(M32)
	SEOUL_PROPERTY(M33)
SEOUL_END_TYPE()

SEOUL_BEGIN_ENUM(MemoryBudgets::Type)
	SEOUL_ENUM_N("Analytics", MemoryBudgets::Analytics)
	SEOUL_ENUM_N("Animation", MemoryBudgets::Animation)
	SEOUL_ENUM_N("Animation2D", MemoryBudgets::Animation2D)
	SEOUL_ENUM_N("Animation3D", MemoryBudgets::Animation3D)
	SEOUL_ENUM_N("Audio", MemoryBudgets::Audio)
	SEOUL_ENUM_N("Commerce", MemoryBudgets::Commerce)
	SEOUL_ENUM_N("Compression", MemoryBudgets::Compression)
	SEOUL_ENUM_N("Config", MemoryBudgets::Config)
	SEOUL_ENUM_N("Content", MemoryBudgets::Content)
	SEOUL_ENUM_N("Cooking", MemoryBudgets::Cooking)
	SEOUL_ENUM_N("Coroutines", MemoryBudgets::Coroutines)
	SEOUL_ENUM_N("Curves", MemoryBudgets::Curves)
	SEOUL_ENUM_N("DataStore", MemoryBudgets::DataStore)
	SEOUL_ENUM_N("DataStoreData", MemoryBudgets::DataStoreData)
	SEOUL_ENUM_N("Debug", MemoryBudgets::Debug)
	SEOUL_ENUM_N("Developer", MemoryBudgets::Developer)
	SEOUL_ENUM_N("DevUI", MemoryBudgets::DevUI)
	SEOUL_ENUM_N("Editor", MemoryBudgets::Editor)
	SEOUL_ENUM_N("Encryption", MemoryBudgets::Encryption)
	SEOUL_ENUM_N("Event", MemoryBudgets::Event)
	SEOUL_ENUM_N("Falcon", MemoryBudgets::Falcon)
	SEOUL_ENUM_N("FalconFont", MemoryBudgets::FalconFont)
	SEOUL_ENUM_N("Fx", MemoryBudgets::Fx)
	SEOUL_ENUM_N("Game", MemoryBudgets::Game)
	SEOUL_ENUM_N("HString", MemoryBudgets::HString)
	SEOUL_ENUM_N("Input", MemoryBudgets::Input)
	SEOUL_ENUM_N("Io", MemoryBudgets::Io)
	SEOUL_ENUM_N("Jobs", MemoryBudgets::Jobs)
	SEOUL_ENUM_N("Navigation", MemoryBudgets::Navigation)
	SEOUL_ENUM_N("Network", MemoryBudgets::Network)
	SEOUL_ENUM_N("None", MemoryBudgets::None)
	SEOUL_ENUM_N("OperatorNew", MemoryBudgets::OperatorNew)
	SEOUL_ENUM_N("OperatorNewArray", MemoryBudgets::OperatorNewArray)
	SEOUL_ENUM_N("Particles", MemoryBudgets::Particles)
	SEOUL_ENUM_N("Performance", MemoryBudgets::Performance)
	SEOUL_ENUM_N("Persistence", MemoryBudgets::Persistence)
	SEOUL_ENUM_N("Physics", MemoryBudgets::Physics)
	SEOUL_ENUM_N("Profiler", MemoryBudgets::Profiler)
	SEOUL_ENUM_N("Reflection", MemoryBudgets::Reflection)
	SEOUL_ENUM_N("RenderCommandStream", MemoryBudgets::RenderCommandStream)
	SEOUL_ENUM_N("Rendering", MemoryBudgets::Rendering)
	SEOUL_ENUM_N("Saving", MemoryBudgets::Saving)
	SEOUL_ENUM_N("Scene", MemoryBudgets::Scene)
	SEOUL_ENUM_N("SceneComponent", MemoryBudgets::SceneComponent)
	SEOUL_ENUM_N("SceneObject", MemoryBudgets::SceneObject)
	SEOUL_ENUM_N("Scripting", MemoryBudgets::Scripting)
	SEOUL_ENUM_N("SpatialSorting", MemoryBudgets::SpatialSorting)
	SEOUL_ENUM_N("StateMachine", MemoryBudgets::StateMachine)
	SEOUL_ENUM_N("Strings", MemoryBudgets::Strings)
	SEOUL_ENUM_N("TBD", MemoryBudgets::TBD)
	SEOUL_ENUM_N("TBDContainer", MemoryBudgets::TBDContainer)
	SEOUL_ENUM_N("Threading", MemoryBudgets::Threading)
	SEOUL_ENUM_N("UIData", MemoryBudgets::UIData)
	SEOUL_ENUM_N("UIDebug", MemoryBudgets::UIDebug)
	SEOUL_ENUM_N("UIRawMemory", MemoryBudgets::UIRawMemory)
	SEOUL_ENUM_N("UIRendering", MemoryBudgets::UIRendering)
	SEOUL_ENUM_N("UIRuntime", MemoryBudgets::UIRuntime)
	SEOUL_ENUM_N("Unknown", MemoryBudgets::Unknown)
	SEOUL_ENUM_N("Video", MemoryBudgets::Video)
SEOUL_END_ENUM()

SEOUL_BEGIN_ENUM(Reflection::MethodInvokeResultCode)
	SEOUL_ENUM_N("Success", Reflection::MethodInvokeResultCode::kSuccess)
	SEOUL_ENUM_N("IncorrectNumberOfArguments", Reflection::MethodInvokeResultCode::kIncorrectNumberOfArguments)
	SEOUL_ENUM_N("InvalidArgument", Reflection::MethodInvokeResultCode::kInvalidArgument)
	SEOUL_ENUM_N("NullThis", Reflection::MethodInvokeResultCode::kNullThis)
	SEOUL_ENUM_N("UnsupportedReturnType", Reflection::MethodInvokeResultCode::kUnsupportedReturnType)
SEOUL_END_ENUM()

SEOUL_BEGIN_ENUM(NetworkFetchPriority)
	SEOUL_ENUM_N("Low", NetworkFetchPriority::kLow)
	SEOUL_ENUM_N("Medium", NetworkFetchPriority::kMedium)
	SEOUL_ENUM_N("Default", NetworkFetchPriority::kDefault)
	SEOUL_ENUM_N("High", NetworkFetchPriority::kHigh)
	SEOUL_ENUM_N("Critical", NetworkFetchPriority::kCritical)
SEOUL_END_ENUM()

SEOUL_BEGIN_TYPE(FilePathRelativeFilename)
	SEOUL_PROPERTY_N_EXT("Hash", GetHash)
	SEOUL_PROPERTY_N_EXT("SizeInBytes", GetSizeInBytes)
	SEOUL_PROPERTY_EXT(IsEmpty)
SEOUL_END_TYPE()

SEOUL_BEGIN_TYPE(HString)
	SEOUL_PROPERTY_N_EXT("Hash", GetHash)
	SEOUL_PROPERTY_N_EXT("SizeInBytes", GetSizeInBytes)
	SEOUL_PROPERTY_EXT(IsEmpty)
SEOUL_END_TYPE()

SEOUL_BEGIN_TYPE(PackageFileEntry)
	SEOUL_PROPERTY_N("OffsetToFile", m_uOffsetToFile)
	SEOUL_PROPERTY_N("CompressedFileSize", m_uCompressedFileSize)
	SEOUL_PROPERTY_N("UncompressedFileSize", m_uUncompressedFileSize)
	SEOUL_PROPERTY_N("ModifiedTime", m_uModifiedTime)
	SEOUL_PROPERTY_N("Crc32Pre", m_uCrc32Pre)
	SEOUL_PROPERTY_N("Crc32Post", m_uCrc32Post)
SEOUL_END_TYPE()

SEOUL_BEGIN_TYPE(PackageFileHeader)
	SEOUL_PROPERTY_N("Signature", m_uSignature)
	SEOUL_PROPERTY_N("Version", m_uVersion)
	SEOUL_PROPERTY_N_EXT("TotalPackageFileSizeInBytes", GetTotalPackageFileSizeInBytes)
	SEOUL_PROPERTY_N_EXT("OffsetToFileTableInBytes", GetOffsetToFileTableInBytes)
	SEOUL_PROPERTY_N_EXT("TotalEntriesInFileTable", GetTotalEntriesInFileTable)
	SEOUL_PROPERTY_N_EXT("GameDirectory", GetGameDirectory)
	SEOUL_PROPERTY_N_EXT("CompressedFileTable", HasCompressedFileTable)
	SEOUL_PROPERTY_N_EXT("SizeOfFileTableInBytes", GetSizeOfFileTableInBytes)
	SEOUL_PROPERTY_N_EXT("BuildVersionMajor", GetBuildVersionMajor)
	SEOUL_PROPERTY_N_EXT("BuildChangelist", GetBuildChangelist)
	SEOUL_PROPERTY_N_EXT("SupportDirectoryQueries", HasSupportDirectoryQueries)
	SEOUL_PROPERTY_N_EXT("Obfuscated", IsObfuscated)
	SEOUL_PROPERTY_N_EXT("Platform", GetPlatform)
SEOUL_END_TYPE()

SEOUL_BEGIN_TYPE(HStringStats)
	SEOUL_PROPERTY_N("TotalHStrings", m_TotalHStrings)
	SEOUL_PROPERTY_N("TotalStaticAllocatedHStrings", m_TotalStaticAllocatedHStrings)
	SEOUL_PROPERTY_N("TotalStaticAllocatedHStringMemory", m_TotalStaticAllocatedHStringMemory)
	SEOUL_PROPERTY_N("CollisionCount", m_CollisionCount)
	SEOUL_PROPERTY_N("WorstCollision", m_WorstCollision)
SEOUL_END_TYPE()

SEOUL_BEGIN_TYPE(Quaternion)
	SEOUL_PROPERTY(X)
	SEOUL_PROPERTY(Y)
	SEOUL_PROPERTY(Z)
	SEOUL_PROPERTY(W)

	SEOUL_PROPERTY_EXT(Length)
	SEOUL_PROPERTY_EXT(LengthSquared)
SEOUL_END_TYPE()

SEOUL_BEGIN_ENUM(PixelFormat)
	SEOUL_ENUM_N("Invalid", PixelFormat::kInvalid)
	SEOUL_ENUM_N("R8G8B8", PixelFormat::kR8G8B8)
	SEOUL_ENUM_N("A8R8G8B8", PixelFormat::kA8R8G8B8)
	SEOUL_ENUM_N("A8R8G8B8sRGB", PixelFormat::kA8R8G8B8sRGB)
	SEOUL_ENUM_N("X8R8G8B8", PixelFormat::kX8R8G8B8)
	SEOUL_ENUM_N("R5G6B5", PixelFormat::kR5G6B5)
	SEOUL_ENUM_N("X1R5G5B5", PixelFormat::kX1R5G5B5)
	SEOUL_ENUM_N("A1R5G5B5", PixelFormat::kA1R5G5B5)
	SEOUL_ENUM_N("A4R4G4B4", PixelFormat::kA4R4G4B4)
	SEOUL_ENUM_N("R3G3B2", PixelFormat::kR3G3B2)
	SEOUL_ENUM_N("A8", PixelFormat::kA8)
	SEOUL_ENUM_N("A8L8", PixelFormat::kA8L8)
	SEOUL_ENUM_N("P8", PixelFormat::kP8)
	SEOUL_ENUM_N("X4R4G4B4", PixelFormat::kX4R4G4B4)
	SEOUL_ENUM_N("A2B10G10R10", PixelFormat::kA2B10G10R10)
	SEOUL_ENUM_N("A8B8G8R8", PixelFormat::kA8B8G8R8)
	SEOUL_ENUM_N("X8B8G8R8", PixelFormat::kX8B8G8R8)
	SEOUL_ENUM_N("G16R16", PixelFormat::kG16R16)
	SEOUL_ENUM_N("A2R10G10B10", PixelFormat::kA2R10G10B10)
	SEOUL_ENUM_N("A2B10G10R10F", PixelFormat::kA2B10G10R10F)
	SEOUL_ENUM_N("A16B16G16R16", PixelFormat::kA16B16G16R16)
	SEOUL_ENUM_N("A16B16G16R16_SIGNED", PixelFormat::kA16B16G16R16_SIGNED)
	SEOUL_ENUM_N("A16B16G16R16_SIGNED_EXP1", PixelFormat::kA16B16G16R16_SIGNED_EXP1)
	SEOUL_ENUM_N("A16B16G16R16_UNSIGNED_EXP1", PixelFormat::kA16B16G16R16_UNSIGNED_EXP1)
	SEOUL_ENUM_N("A16B16G16R16_SIGNED_EXP2", PixelFormat::kA16B16G16R16_SIGNED_EXP2)
	SEOUL_ENUM_N("A16B16G16R16_UNSIGNED_EXP2", PixelFormat::kA16B16G16R16_UNSIGNED_EXP2)
	SEOUL_ENUM_N("A16B16G16R16_SIGNED_EXP3", PixelFormat::kA16B16G16R16_SIGNED_EXP3)
	SEOUL_ENUM_N("A16B16G16R16_UNSIGNED_EXP3", PixelFormat::kA16B16G16R16_UNSIGNED_EXP3)
	SEOUL_ENUM_N("R16F", PixelFormat::kR16F)
	SEOUL_ENUM_N("D16I", PixelFormat::kD16I)
	SEOUL_ENUM_N("G16R16F", PixelFormat::kG16R16F)
	SEOUL_ENUM_N("A16B16G16R16F", PixelFormat::kA16B16G16R16F)
	SEOUL_ENUM_N("R32F", PixelFormat::kR32F)
	SEOUL_ENUM_N("R32F_AS_R16F_EXPAND", PixelFormat::kR32F_AS_R16F_EXPAND)
	SEOUL_ENUM_N("G32R32F", PixelFormat::kG32R32F)
	SEOUL_ENUM_N("G32R32F_AS_G16R16", PixelFormat::kG32R32F_AS_G16R16)
	SEOUL_ENUM_N("A32B32G32R32F", PixelFormat::kA32B32G32R32F)
	SEOUL_ENUM_N("A32B32G32R32", PixelFormat::kA32B32G32R32)
	SEOUL_ENUM_N("DXT1", PixelFormat::kDXT1)
	SEOUL_ENUM_N("DXT2", PixelFormat::kDXT2)
	SEOUL_ENUM_N("DXT3", PixelFormat::kDXT3)
	SEOUL_ENUM_N("DXT4", PixelFormat::kDXT4)
	SEOUL_ENUM_N("DXT5", PixelFormat::kDXT5)
	SEOUL_ENUM_N("PVRTC_RGB_4BPPV1", PixelFormat::kPVRTC_RGB_4BPPV1)
	SEOUL_ENUM_N("PVRTC_RGB_2BPPV1", PixelFormat::kPVRTC_RGB_2BPPV1)
	SEOUL_ENUM_N("PVRTC_RGBA_4BPPV1", PixelFormat::kPVRTC_RGBA_4BPPV1)
	SEOUL_ENUM_N("PVRTC_RGBA_2BPPV1", PixelFormat::kPVRTC_RGBA_2BPPV1)
	SEOUL_ENUM_N("ETC1_RGB8", PixelFormat::kETC1_RGB8)
SEOUL_END_ENUM()

SEOUL_BEGIN_ENUM(PlaneTestResult)
	SEOUL_ENUM_N("Front", PlaneTestResult::kFront)
	SEOUL_ENUM_N("Back", PlaneTestResult::kBack)
	SEOUL_ENUM_N("Intersects", PlaneTestResult::kIntersects)
SEOUL_END_ENUM()

SEOUL_BEGIN_TYPE(Plane)
	SEOUL_PROPERTY(A)
	SEOUL_PROPERTY(B)
	SEOUL_PROPERTY(C)
	SEOUL_PROPERTY(D)
SEOUL_END_TYPE()

SEOUL_BEGIN_ENUM(Platform)
	SEOUL_ENUM_N("PC", Platform::kPC)
	SEOUL_ENUM_N("IOS", Platform::kIOS)
	SEOUL_ENUM_N("Android", Platform::kAndroid)
	SEOUL_ENUM_N("Linux", Platform::kLinux)
SEOUL_END_ENUM()

SEOUL_BEGIN_TYPE(Point2DInt)
	SEOUL_PROPERTY(X)
	SEOUL_PROPERTY(Y)
SEOUL_END_TYPE()

SEOUL_BEGIN_TYPE(PseudoRandom, TypeFlags::kDisableCopy)
	SEOUL_PROPERTY_PAIR_N("Seed", GetSeed, SetSeed)
SEOUL_END_TYPE()

SEOUL_BEGIN_TYPE(PseudoRandomSeed)
	SEOUL_PROPERTY_N("SeedX", m_uX)
	SEOUL_PROPERTY_N("SeedY", m_uY)
SEOUL_END_TYPE()

SEOUL_BEGIN_TYPE(Rectangle2DInt)
	SEOUL_PROPERTY_N("Left", m_iLeft)
	SEOUL_PROPERTY_N("Right", m_iRight)
	SEOUL_PROPERTY_N("Top", m_iTop)
	SEOUL_PROPERTY_N("Bottom", m_iBottom)
SEOUL_END_TYPE()

SEOUL_TYPE(RGBA);

SEOUL_BEGIN_ENUM(SerializedGameDirectory)
	SEOUL_ENUM_N("Unknown", SerializedGameDirectory::kUnknown)
	SEOUL_ENUM_N("Config", SerializedGameDirectory::kConfig)
	SEOUL_ENUM_N("Content", SerializedGameDirectory::kContent)
SEOUL_END_ENUM()

SEOUL_BEGIN_ENUM(IsCurrentlyDSTResult)
	SEOUL_ENUM_N("KnownTrue", IsCurrentlyDSTResult::KnownTrue)
	SEOUL_ENUM_N("KnownFalse", IsCurrentlyDSTResult::KnownFalse)
	SEOUL_ENUM_N("Unknown", IsCurrentlyDSTResult::Unknown)
SEOUL_END_ENUM()

SEOUL_BEGIN_TYPE(TimeInterval)
	SEOUL_METHOD_N("__add", Add)
	SEOUL_METHOD_N("__sub", Subtract)
	SEOUL_METHOD_N("__eq", operator==)
	SEOUL_METHOD_N("__lt", operator<)
	SEOUL_METHOD_N("__le", operator<=)
	SEOUL_METHOD_N("__unm", Negate)

	SEOUL_METHOD(FromMicroseconds)
	SEOUL_METHOD(FromSecondsInt64)
	SEOUL_METHOD(FromSecondsDouble)
	SEOUL_METHOD(FromHoursInt64)
	SEOUL_METHOD(FromDaysInt64)
	SEOUL_METHOD(GetSeconds)
	SEOUL_METHOD(GetSecondsAsDouble)
	SEOUL_METHOD(IsZero)
SEOUL_END_TYPE()

SEOUL_BEGIN_TYPE(WorldTime)
	SEOUL_METHOD_N("__add", operator+)
	SEOUL_METHOD_N("__sub", SubtractWorldTime)
	SEOUL_METHOD_N("__eq", operator==)
	SEOUL_METHOD_N("__lt", operator<)
	SEOUL_METHOD_N("__le", operator<=)

	SEOUL_METHOD(FromMicroseconds)
		SEOUL_DEV_ONLY_ATTRIBUTE(ScriptSignature, "WorldTime", "double iMicroseconds")
	SEOUL_METHOD(FromSecondsInt64)
		SEOUL_DEV_ONLY_ATTRIBUTE(ScriptSignature, "WorldTime", "double iSeconds")
	SEOUL_METHOD(FromSecondsDouble)
		SEOUL_DEV_ONLY_ATTRIBUTE(ScriptSignature, "WorldTime", "double fSeconds")
	SEOUL_METHOD(FromYearMonthDayUTC)
		SEOUL_DEV_ONLY_ATTRIBUTE(ScriptSignature, "WorldTime", "double iYear, double uMonth, double iDay")
	SEOUL_METHOD(IsCurrentlyDST)
	SEOUL_METHOD(GetSeconds)
	SEOUL_METHOD(GetSecondsAsDouble)
	SEOUL_METHOD(IsZero)
	SEOUL_METHOD(ParseISO8601DateTime)
		SEOUL_DEV_ONLY_ATTRIBUTE(ScriptSignature, "WorldTime", "string sDateTime")
	SEOUL_METHOD(ToISO8601DateTimeUTCString)
	SEOUL_METHOD(AddSeconds)
	SEOUL_METHOD(AddMinutes)
	SEOUL_METHOD(AddHours)
	SEOUL_METHOD(AddDays)
	SEOUL_METHOD(GetDayStartTime)
		SEOUL_DEV_ONLY_ATTRIBUTE(ScriptSignature, "WorldTime", "double iOffsetHoursUTC")
	SEOUL_METHOD(GetNextDayStartTime)
		SEOUL_DEV_ONLY_ATTRIBUTE(ScriptSignature, "WorldTime", "double iOffsetHoursUTC")
	SEOUL_METHOD(GetUTCTime)
		SEOUL_DEV_ONLY_ATTRIBUTE(ScriptSignature, "WorldTime")
SEOUL_END_TYPE()

SEOUL_BEGIN_TYPE(SaveLoadUtil::SaveFileMetadata)
	SEOUL_PROPERTY_N("SessionGuid", m_sSessionGuid)
	SEOUL_PROPERTY_N("TransactionIdMin", m_iTransactionIdMin)
	SEOUL_PROPERTY_N("TransactionIdMax", m_iTransactionIdMax)
	SEOUL_PROPERTY_N("Version", m_iVersion)
SEOUL_END_TYPE()

SEOUL_BEGIN_ENUM(SaveLoadResult)
	SEOUL_ENUM_N("CloudCancelled", SaveLoadResult::kCloudCancelled)
	SEOUL_ENUM_N("Success", SaveLoadResult::kSuccess)

	SEOUL_ENUM_N("ErrorBackupCreateDeleteOld", SaveLoadResult::kErrorBackupCreateDeleteOld)
	SEOUL_ENUM_N("ErrorBackupDelete", SaveLoadResult::kErrorBackupDelete)
	SEOUL_ENUM_N("ErrorBackupRestore", SaveLoadResult::kErrorBackupRestore)
	SEOUL_ENUM_N("ErrorBase64", SaveLoadResult::kErrorBase64)
	SEOUL_ENUM_N("ErrorCompression", SaveLoadResult::kErrorCompression)
	SEOUL_ENUM_N("ErrorChecksumCheck", SaveLoadResult::kErrorChecksumCheck)
	SEOUL_ENUM_N("ErrorChecksumData", SaveLoadResult::kErrorChecksumData)
	SEOUL_ENUM_N("ErrorCyclicalMigrations", SaveLoadResult::kErrorCyclicalMigrations)
	SEOUL_ENUM_N("ErrorDirectoryCreate", SaveLoadResult::kErrorDirectoryCreate)
	SEOUL_ENUM_N("ErrorDiffApply", SaveLoadResult::kErrorDiffApply)
	SEOUL_ENUM_N("ErrorDiffGenerate", SaveLoadResult::kErrorDiffGenerate)
	SEOUL_ENUM_N("ErrorEncryption", SaveLoadResult::kErrorEncryption)
	SEOUL_ENUM_N("ErrorExtraData", SaveLoadResult::kErrorExtraData)
	SEOUL_ENUM_N("ErrorFileFlush", SaveLoadResult::kErrorFileFlush)
	SEOUL_ENUM_N("ErrorFileNotFound", SaveLoadResult::kErrorFileNotFound)
	SEOUL_ENUM_N("ErrorFileOp", SaveLoadResult::kErrorFileOp)
	SEOUL_ENUM_N("ErrorFileWriteAccess", SaveLoadResult::kErrorFileWriteAccess)
	SEOUL_ENUM_N("ErrorFileWriteBadFileDescriptor", SaveLoadResult::kErrorFileWriteBadFileDescriptor)
	SEOUL_ENUM_N("ErrorFileWriteBigFile", SaveLoadResult::kErrorFileWriteBigFile)
	SEOUL_ENUM_N("ErrorFileWriteEOF", SaveLoadResult::kErrorFileWriteEOF)
	SEOUL_ENUM_N("ErrorFileWriteExist", SaveLoadResult::kErrorFileWriteExist)
	SEOUL_ENUM_N("ErrorFileWriteInvalid", SaveLoadResult::kErrorFileWriteInvalid)
	SEOUL_ENUM_N("ErrorFileWriteIo", SaveLoadResult::kErrorFileWriteIo)
	SEOUL_ENUM_N("ErrorFileWriteIsDir", SaveLoadResult::kErrorFileWriteIsDir)
	SEOUL_ENUM_N("ErrorFileWriteNameTooLong", SaveLoadResult::kErrorFileWriteNameTooLong)
	SEOUL_ENUM_N("ErrorFileWriteNoBufferSpace", SaveLoadResult::kErrorFileWriteNoBufferSpace)
	SEOUL_ENUM_N("ErrorFileWriteNoEntity", SaveLoadResult::kErrorFileWriteNoEntity)
	SEOUL_ENUM_N("ErrorFileWriteNoSpace", SaveLoadResult::kErrorFileWriteNoSpace)
	SEOUL_ENUM_N("ErrorFileWriteNotSupported", SaveLoadResult::kErrorFileWriteNotSupported)
	SEOUL_ENUM_N("ErrorFileWriteReadOnly", SaveLoadResult::kErrorFileWriteReadOnly)
	SEOUL_ENUM_N("ErrorFileWriteTooManyProcess", SaveLoadResult::kErrorFileWriteTooManyProcess)
	SEOUL_ENUM_N("ErrorFileWriteTooManySystem", SaveLoadResult::kErrorFileWriteTooManySystem)
	SEOUL_ENUM_N("ErrorFileWriteUnknown", SaveLoadResult::kErrorFileWriteUnknown)
	SEOUL_ENUM_N("ErrorFutureMigrationVersion", SaveLoadResult::kErrorFutureMigrationVersion)
	SEOUL_ENUM_N("ErrorJsonParse", SaveLoadResult::kErrorJsonParse)
	SEOUL_ENUM_N("ErrorLookup", SaveLoadResult::kErrorLookup)
	SEOUL_ENUM_N("ErrorMD5Check", SaveLoadResult::kErrorMD5Check)
	SEOUL_ENUM_N("ErrorMD5Data", SaveLoadResult::kErrorMD5Data)
	SEOUL_ENUM_N("ErrorMigrationCallback", SaveLoadResult::kErrorMigrationCallback)
	SEOUL_ENUM_N("ErrorNetworkFailure", SaveLoadResult::kErrorNetworkFailure)
	SEOUL_ENUM_N("ErrorNoMigrations", SaveLoadResult::kErrorNoMigrations)
	SEOUL_ENUM_N("ErrorRenameAccess", SaveLoadResult::kErrorRenameAccess)
	SEOUL_ENUM_N("ErrorRenameBusy", SaveLoadResult::kErrorRenameBusy)
	SEOUL_ENUM_N("ErrorRenameExist", SaveLoadResult::kErrorRenameExist)
	SEOUL_ENUM_N("ErrorRenameInvalid", SaveLoadResult::kErrorRenameInvalid)
	SEOUL_ENUM_N("ErrorRenameIo", SaveLoadResult::kErrorRenameIo)
	SEOUL_ENUM_N("ErrorRenameNameTooLong", SaveLoadResult::kErrorRenameNameTooLong)
	SEOUL_ENUM_N("ErrorRenameNoEntity", SaveLoadResult::kErrorRenameNoEntity)
	SEOUL_ENUM_N("ErrorRenameNoSpace", SaveLoadResult::kErrorRenameNoSpace)
	SEOUL_ENUM_N("ErrorRenameReadOnly", SaveLoadResult::kErrorRenameReadOnly)
	SEOUL_ENUM_N("ErrorRenameUnknown", SaveLoadResult::kErrorRenameUnknown)
	SEOUL_ENUM_N("ErrorSaveCheck", SaveLoadResult::kErrorSaveCheck)
	SEOUL_ENUM_N("ErrorSaveData", SaveLoadResult::kErrorSaveData)
	SEOUL_ENUM_N("ErrorSerialization", SaveLoadResult::kErrorSerialization)
	SEOUL_ENUM_N("ErrorServerInternalFailure", SaveLoadResult::kErrorServerInternalFailure)
	SEOUL_ENUM_N("ErrorServerRejection", SaveLoadResult::kErrorServerRejection)
	SEOUL_ENUM_N("ErrorSessionGuid", SaveLoadResult::kErrorSessionGuid)
	SEOUL_ENUM_N("ErrorSignatureCheck", SaveLoadResult::kErrorSignatureCheck)
	SEOUL_ENUM_N("ErrorSignatureData", SaveLoadResult::kErrorSignatureData)
	SEOUL_ENUM_N("ErrorTooBig", SaveLoadResult::kErrorTooBig)
	SEOUL_ENUM_N("ErrorTooSmall", SaveLoadResult::kErrorTooSmall)
	SEOUL_ENUM_N("ErrorTransactionIdMax", SaveLoadResult::kErrorTransactionIdMax)
	SEOUL_ENUM_N("ErrorTransactionIdMin", SaveLoadResult::kErrorTransactionIdMin)
	SEOUL_ENUM_N("ErrorUnknown", SaveLoadResult::kErrorUnknown)
	SEOUL_ENUM_N("ErrorUserVersion", SaveLoadResult::kErrorUserVersion)
	SEOUL_ENUM_N("ErrorVersionCheck", SaveLoadResult::kErrorVersionCheck)
	SEOUL_ENUM_N("ErrorVersionData", SaveLoadResult::kErrorVersionData)

	SEOUL_ENUM_N("CloudDisabled", SaveLoadResult::kCloudDisabled)
	SEOUL_ENUM_N("CloudNeedsFullCheckpoint", SaveLoadResult::kCloudNeedsFullCheckpoint)
	SEOUL_ENUM_N("CloudNoUpdate", SaveLoadResult::kCloudNoUpdate)
	SEOUL_ENUM_N("CloudRateLimiting", SaveLoadResult::kCloudRateLimiting)
SEOUL_END_ENUM()

SEOUL_BEGIN_TYPE(StandardVertex2D)
	SEOUL_PROPERTY_N("P", m_vP)
	SEOUL_PROPERTY_N("ColorMultiply", m_ColorMultiply)
	SEOUL_PROPERTY_N("ColorAdd", m_ColorAdd)
	SEOUL_PROPERTY_N("T", m_vT)
SEOUL_END_TYPE()

SEOUL_BEGIN_TYPE(String)
	SEOUL_METHOD(Clear)
	SEOUL_METHOD(ToUpper)
	SEOUL_METHOD(ToLower)
	SEOUL_METHOD(ToUpperASCII)
	SEOUL_METHOD(ToLowerASCII)

	SEOUL_PROPRETY_N_Q_S("Hash", GetHash, UInt32 (*)(const String&))
	SEOUL_PROPERTY_N_EXT("LengthInCharacters", GetUnicodeLength)
	SEOUL_PROPERTY_N_EXT("SizeInBytes", GetSize)
	SEOUL_PROPERTY_EXT(IsEmpty)
SEOUL_END_TYPE()

SEOUL_BEGIN_ENUM(Ternary)
	SEOUL_ALIAS("yes", "TernaryTrue")
	SEOUL_ALIAS("no", "TernaryFlase")
	SEOUL_ALIAS("Yes", "TernaryTrue")
	SEOUL_ALIAS("No", "TernaryFalse")
	SEOUL_ENUM_N("TernaryTrue", Ternary::TernaryTrue)
	SEOUL_ENUM_N("TernaryFalse", Ternary::TernaryFalse)
	SEOUL_ENUM_N("Unset", Ternary::Unset)
SEOUL_END_ENUM()

SEOUL_BEGIN_TYPE(ThreadId)
	SEOUL_PROPERTY_N_EXT("Value", GetValue)
	SEOUL_PROPERTY_N_EXT("IsValid", IsValid)
SEOUL_END_TYPE()

SEOUL_TYPE(UUID);

SEOUL_BEGIN_TYPE(Vector2D)
	SEOUL_PROPERTY(X)
	SEOUL_PROPERTY(Y)

	SEOUL_PROPERTY_EXT(Length)
	SEOUL_PROPERTY_EXT(LengthSquared)
SEOUL_END_TYPE()

SEOUL_BEGIN_TYPE(Vector3D)
	SEOUL_PROPERTY(X)
	SEOUL_PROPERTY(Y)
	SEOUL_PROPERTY(Z)

	SEOUL_PROPERTY_EXT(Length)
	SEOUL_PROPERTY_EXT(LengthSquared)
SEOUL_END_TYPE()

SEOUL_BEGIN_TYPE(Vector4D)
	SEOUL_PROPERTY(X)
	SEOUL_PROPERTY(Y)
	SEOUL_PROPERTY(Z)
	SEOUL_PROPERTY(W)

	SEOUL_PROPERTY_EXT(Length)
	SEOUL_PROPERTY_EXT(LengthSquared)
SEOUL_END_TYPE()

SEOUL_BEGIN_TYPE(VmStats)
	SEOUL_PROPERTY_N("UIBindingUserData", m_UIBindingUserData)
	SEOUL_PROPERTY_N("UINodes", m_UINodes)
SEOUL_END_TYPE()

SEOUL_BEGIN_ENUM(ZlibCompressionLevel)
	SEOUL_ENUM_N("Best", ZlibCompressionLevel::kBest)
	SEOUL_ENUM_N("Default", ZlibCompressionLevel::kDefault)
	SEOUL_ENUM_N("Fast", ZlibCompressionLevel::kFast)
	SEOUL_ENUM_N("None", ZlibCompressionLevel::kNone)
SEOUL_END_ENUM()

SEOUL_BEGIN_ENUM(ZSTDCompressionLevel)
	SEOUL_ENUM_N("Best", ZSTDCompressionLevel::kBest)
	SEOUL_ENUM_N("Fastest", ZSTDCompressionLevel::kFastest)
	SEOUL_ENUM_N("Normal", ZSTDCompressionLevel::kNormal)
SEOUL_END_ENUM()

SEOUL_TYPE(Reflection::SerializeContext, TypeFlags::kDisableNew);

SEOUL_SPEC_TEMPLATE_TYPE(CheckedPtr<ColorARGBu8>)
SEOUL_SPEC_TEMPLATE_TYPE(CheckedPtr<HashSet<HString, 48, DefaultHashTableKeyTraits<HString>>>)
SEOUL_SPEC_TEMPLATE_TYPE(CheckedPtr<HashSet<Int32, 48, DefaultHashTableKeyTraits<Int32>>>)
SEOUL_SPEC_TEMPLATE_TYPE(CheckedPtr<Vector<UInt32, 21>>)
SEOUL_SPEC_TEMPLATE_TYPE(CheckedPtr<Vector<WorldTime, 48>>)
SEOUL_SPEC_TEMPLATE_TYPE(DefaultHashTableKeyTraits<HString>)
SEOUL_SPEC_TEMPLATE_TYPE(DefaultHashTableKeyTraits<Int32>)
SEOUL_SPEC_TEMPLATE_TYPE(DefaultHashTableKeyTraits<String>)
SEOUL_SPEC_TEMPLATE_TYPE(DefaultHashTableKeyTraits<UInt32>)
SEOUL_SPEC_TEMPLATE_TYPE(DefaultHashTableKeyTraits<WorldTime>)
SEOUL_SPEC_TEMPLATE_TYPE(FixedArray<Float, 4>)
SEOUL_SPEC_TEMPLATE_TYPE(FixedArray<Float, 10>)
SEOUL_SPEC_TEMPLATE_TYPE(FixedArray<HString, 3>)
SEOUL_SPEC_TEMPLATE_TYPE(FixedArray<UInt32, 3>)
SEOUL_SPEC_TEMPLATE_TYPE(FixedArray<UInt8, 3>)
SEOUL_SPEC_TEMPLATE_TYPE(FixedArray<Vector2D, 10>)
SEOUL_SPEC_TEMPLATE_TYPE(HashSet<HString, 1, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashSet<HString, 21, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashSet<HString, 33, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashSet<HString, 48, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashSet<Int32, 33, DefaultHashTableKeyTraits<Int32>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashSet<Int32, 48, DefaultHashTableKeyTraits<Int32>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashSet<String, 21, DefaultHashTableKeyTraits<String>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashSet<UInt32, 21, DefaultHashTableKeyTraits<UInt32>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, Bool, 1, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, Bool, 21, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, Bool, 45, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, Bool, 48, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, CheckedPtr<HashSet<HString, 48, DefaultHashTableKeyTraits<HString>>>, 33, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, CheckedPtr<HashSet<Int32, 48, DefaultHashTableKeyTraits<Int32>>>, 33, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, CheckedPtr<Vector<WorldTime, 48>>, 33, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, FilePath, 21, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, FilePath, 48, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, FilePath, 54, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, Float, 21, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, HString, 21, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, HString, 27, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, HString, 33, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, HString, 48, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, HashSet<HString, 21, DefaultHashTableKeyTraits<HString>>, 21, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, HashSet<Int32, 33, DefaultHashTableKeyTraits<Int32>>, 33, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, HashTable<HString, Vector<HString, 21>, 21, DefaultHashTableKeyTraits<HString>>, 21, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, Int32, 33, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, String, 21, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, String, 46, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, UInt32, 21, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, UInt32, 48, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, Vector<Float, 21>, 21, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, Vector<HString, 21>, 21, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, Vector<HString, 21>, 48, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, Vector<HString, 48>, 21, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, Vector<HString, 48>, 48, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, Vector<UInt32, 21>, 21, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, Vector<UInt32, 48>, 21, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, WorldTime, 21, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, WorldTime, 33, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<HString, WorldTime, 48, DefaultHashTableKeyTraits<HString>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<Int32, Double, 48, DefaultHashTableKeyTraits<Int32>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<Int32, HString, 21, DefaultHashTableKeyTraits<Int32>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<Int32, Int32, 21, DefaultHashTableKeyTraits<Int32>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<Int32, WorldTime, 33, DefaultHashTableKeyTraits<Int32>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<Int32, WorldTime, 21, DefaultHashTableKeyTraits<Int32>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<String, Bool, 21, DefaultHashTableKeyTraits<String>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<String, Bool, 48, DefaultHashTableKeyTraits<String>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<String, Int32, 0, DefaultHashTableKeyTraits<String>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<String, Int32, 48, DefaultHashTableKeyTraits<String>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<String, String, 0, DefaultHashTableKeyTraits<String>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<String, String, 21, DefaultHashTableKeyTraits<String>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<String, String, 48, DefaultHashTableKeyTraits<String>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<String, UInt32, 15, DefaultHashTableKeyTraits<String>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<String, UInt32, 21, DefaultHashTableKeyTraits<String>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<String, Vector2D, 21, DefaultHashTableKeyTraits<String>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<String, Vector<HString, 23>, 23, DefaultHashTableKeyTraits<String>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<String, WorldTime, 21, DefaultHashTableKeyTraits<String>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<String, WorldTime, 33, DefaultHashTableKeyTraits<String>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<String, WorldTime, 48, DefaultHashTableKeyTraits<String>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<UInt32, UInt32, 21, DefaultHashTableKeyTraits<UInt32>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<UInt32, UInt32, 48, DefaultHashTableKeyTraits<UInt32>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<UInt32, Bool, 33, DefaultHashTableKeyTraits<UInt32>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<UInt32, Vector<HString, 21>, 21, DefaultHashTableKeyTraits<UInt32>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<WorldTime, Double, 21, DefaultHashTableKeyTraits<WorldTime>>)
SEOUL_SPEC_TEMPLATE_TYPE(HashTable<WorldTime, UInt32, 21, DefaultHashTableKeyTraits<WorldTime>>)
SEOUL_SPEC_TEMPLATE_TYPE(LinearCurve<Vector2D, 38>)
SEOUL_SPEC_TEMPLATE_TYPE(List<Int32, 48>)
SEOUL_SPEC_TEMPLATE_TYPE(List<String, 48>)
SEOUL_SPEC_TEMPLATE_TYPE(List<UInt32, 48>)
SEOUL_SPEC_TEMPLATE_TYPE(List<UInt64, 21>)
SEOUL_SPEC_TEMPLATE_TYPE(Pair<Float, FilePath>)
SEOUL_SPEC_TEMPLATE_TYPE(Pair<HString, HString>)
SEOUL_SPEC_TEMPLATE_TYPE(Pair<Int32, Int32>)
SEOUL_SPEC_TEMPLATE_TYPE(Pair<Int8, UInt64>)
SEOUL_SPEC_TEMPLATE_TYPE(Pair<UInt32, Float>)
SEOUL_SPEC_TEMPLATE_TYPE(Pair<UInt32, UInt32>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<Bool, 21>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<CookSource, 9>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<FilePath, 21>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<FilePath, 27>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<FilePath, 48>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<FilePath, 54>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<Float, 2>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<Float, 21>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<Float, 38>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<Float, 46>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<Float, 48>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<HString, 1>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<HString, 2>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<HString, 21>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<HString, 23>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<HString, 27>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<HString, 39>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<HString, 48>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<HString, 4>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<Int16, 15>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<Int32, 21>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<Int32, 48>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<Matrix2x3, 15>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<Pair<Float, FilePath>, 21>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<Pair<HString, HString>, 21>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<Pair<UInt32, Float>, 21>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<Pair<UInt32, UInt32>, 21>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<String, 0>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<String, 9>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<String, 21>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<String, 27>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<String, 33>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<String, 46>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<String, 48>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<UInt16, 2>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<UInt32, 21>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<UInt32, 27>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<UInt32, 48>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<UInt64, 21>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<UInt8, 21>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<UInt8, 48>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<Vector2D, 2>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<Vector2D, 15>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<Vector2D, 21>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<Vector2D, 38>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<Vector2D, 48>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<Vector3D, 34>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<Vector<Float, 21>, 21>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<Vector<HString, 21>, 21>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<Vector<UInt32, 21>, 21>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<Vector<UInt32, 48>, 48>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<Vector<Vector2D, 15>, 15>)
SEOUL_SPEC_TEMPLATE_TYPE(Vector<WorldTime, 48>)

} // namespace Seoul
