/**
 * \file IOSApplePlatformSignInManager.h
 * \brief IOS-specific platform sign-in manager. Implemented
 * with Apple Sign-In API.
 *
 * Copyright (c) Demiurge Studios, Inc.
 * 
 * This source code is licensed under the MIT license.
 * Full license details can be found in the LICENSE file
 * in the root directory of this source tree.
 */

#pragma once
#ifndef IOS_APPLE_PLATFORM_SIGN_IN_MANAGER_H
#define IOS_APPLE_PLATFORM_SIGN_IN_MANAGER_H

#include "Atomic32.h"
#include "PlatformSignInManager.h"
#include "Mutex.h"
#include "Prereqs.h"

#if SEOUL_WITH_APPLESIGNIN

#ifdef __OBJC__
@class UIViewController;
@class IOSApplePlatformSignInDelegate;
@class IOSApplePlatformSignInContextProvider;
#else
typedef void UIViewController;
typedef void IOSApplePlatformSignInDelegate;
typedef void IOSApplePlatformSignInContextProvider;
#endif

namespace Seoul
{

/**
 * IOS-specific sign in using Apple Sign-In
 */
class IOSApplePlatformSignInManager SEOUL_SEALED : public PlatformSignInManager
{
public:
	/**
	 * Convenience function to get the IOSApplePlatformSignInManager singleton pointer
	 */
	static CheckedPtr<IOSApplePlatformSignInManager> Get()
	{
		if (PlatformSignInManager::Get() && PlatformSignInManager::Get()->GetType() == PlatformSignInManagerType::kIOSApple)
		{
			return (IOSApplePlatformSignInManager*)PlatformSignInManager::Get().Get();
		}
		else
		{
			return CheckedPtr<IOSApplePlatformSignInManager>();
		}
	}

	IOSApplePlatformSignInManager();
	~IOSApplePlatformSignInManager();

	void Initialize(void* pRootViewController);
	
	UIViewController* GetRootViewController() const
	{
		return m_pRootViewController;
	}

	virtual Atomic32Type GetStateChangeCount() const SEOUL_OVERRIDE
	{
		return m_ChangeCount;
	}

	virtual PlatformSignInManagerType GetType() const SEOUL_OVERRIDE {
		return PlatformSignInManagerType::kIOSApple;
	}

	virtual Bool HaveAnyCancellationsOccurred() const SEOUL_OVERRIDE
	{
		return (0 != m_CancellationCount);
	}

	virtual Bool IsSignedIn() const SEOUL_OVERRIDE
	{
		return m_bSignedIn;
	}

	virtual Bool IsSigningIn() const SEOUL_OVERRIDE
	{
		return m_bSigningIn;
	}

	virtual Bool IsSignInSupported() const SEOUL_OVERRIDE;

	virtual void SignIn() SEOUL_OVERRIDE;
	virtual void SignOut() SEOUL_OVERRIDE;

	virtual void GetIDToken(const OnTokenReceivedDelegate& delegate) SEOUL_OVERRIDE;
	virtual void StartWithIdToken(HTTP::Request& rRequest) SEOUL_OVERRIDE;
	
	virtual void SetIDToken(const String& sToken,
							const String& sAssociatedOldToken) SEOUL_OVERRIDE;

	virtual void OnSessionStart() SEOUL_OVERRIDE { /* Nop */ }
	virtual void OnSessionEnd() SEOUL_OVERRIDE { /* Nop */ }

	// Hooks invoked by handlers.
	static void HandlePlatformChange(Bool bSignedIn,
									 const String& sUser,
									 const String& sIdentityToken,
									 const String& sAuthCode);
	static void HandlePlatformUserCancellation();

private:
	UIViewController* m_pRootViewController;
	IOSApplePlatformSignInDelegate* m_pAppleSignInDelegate;
	IOSApplePlatformSignInContextProvider* m_pAppleSignInContextProvider;

	Atomic32 m_ChangeCount;
	Atomic32 m_CancellationCount;
	Mutex m_Mutex;
	
	Atomic32Value<Bool> m_bInitialized;
	Atomic32Value<Bool> m_bSignedIn;
	Atomic32Value<Bool> m_bSigningIn;
	
	// The user is a string identifier generated by Apple which is unique per
	// app per user. It is never their real Apple username.
	String m_sUserID;
	// The identity token and auth code are initial pieces of data which
	// we need to verify Apple sign-in with the server. Getting this data
	// requires user interaction with a sign-in prompt.
	String m_sIdentityToken;
	String m_sAuthCode;
	// After the identity token and auth code are accepted by the server,
	// we should receive a session token with a longer lifetime. This token
	// is stored in the keychain per device, and authorizes this user
	// with the server for repeat verification.
	String m_sSessionToken;

	void InternalSignIn();
	void InternalPerformSignInRequest(const String& sUser);

	void OnPlatformChange(Bool bSignedIn,
						  const String& sUser,
						  const String& sIdentityToken,
						  const String& sAuthCode);
	void OnPlatformUserCancellation();

	SEOUL_DISABLE_COPY(IOSApplePlatformSignInManager);
}; // class IOSApplePlatformSignInManager

} // namespace Seoul

#endif 	// SEOUL_WITH_APPLESIGNIN

#endif  // include guard
