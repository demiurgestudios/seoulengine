/**
 * \file EncryptAESTest.cpp
 *
 * Copyright (c) Demiurge Studios, Inc.
 * 
 * This source code is licensed under the MIT license.
 * Full license details can be found in the LICENSE file
 * in the root directory of this source tree.
 */

#include "EncryptAES.h"
#include "EncryptAESTest.h"
#include "Logger.h"
#include "ReflectionDefine.h"
#include "UnitTesting.h"

namespace Seoul
{

#if SEOUL_UNIT_TESTS

SEOUL_BEGIN_TYPE(EncryptAESTest)
	SEOUL_ATTRIBUTE(UnitTest)
	SEOUL_METHOD(TestBasic)
	SEOUL_METHOD(TestZero)
	SEOUL_METHOD(TestOneByte)
	SEOUL_METHOD(Test15Bytes)
	SEOUL_METHOD(Test16Bytes)
	SEOUL_METHOD(Test17Bytes)
	SEOUL_METHOD(Test31Bytes)
	SEOUL_METHOD(Test32Bytes)
	SEOUL_METHOD(Test33Bytes)

	SEOUL_METHOD(TestSHA512DigestZero)
	SEOUL_METHOD(TestSHA512DigestOneByte)
	SEOUL_METHOD(TestSHA512Digest63Bytes)
	SEOUL_METHOD(TestSHA512Digest64Bytes)
	SEOUL_METHOD(TestSHA512Digest65Bytes)
	SEOUL_METHOD(TestSHA512Digest127Bytes)
	SEOUL_METHOD(TestSHA512Digest128Bytes)
	SEOUL_METHOD(TestSHA512Digest129Bytes)
SEOUL_END_TYPE()

using namespace EncryptAES;

// Key to use for encrypt testing.
static const UInt8 kauKey[32] =
{
	0x1a, 0xb4, 0x5f, 0x63, 0x21, 0xda, 0x3b, 0xf6,
	0xe2, 0x72, 0x4b, 0xd4, 0x4d, 0x13, 0xc1, 0xc7,
	0x8a, 0xc6, 0x08, 0x1d, 0x51, 0xaa, 0xd6, 0x26,
	0xda, 0xac, 0x27, 0x5e, 0xc8, 0xf5, 0xec, 0xb8,
};

static void TestCommon(
	UInt8 const auNonce[kEncryptionNonceLength],
	UInt8 const* pData,
	UInt32 uData,
	UInt8 const* pExpectedData = nullptr)
{
	// Make a copy of the data.
	Vector<UInt8> vData(pData, pData + uData);
	// If empty, just fill with zeros, leaving a full block.
	if (!uData)
	{
		vData.Resize(kEncryptionNonceLength, 0u);
	}

	// Encrypt the data.
	EncryptInPlace(vData.Data(), uData, kauKey, sizeof(kauKey), auNonce);

	// Check if given a comparison value.
	if (pExpectedData)
	{
		// Check equal.
		SEOUL_UNITTESTING_ASSERT_EQUAL(0, memcmp(vData.Data(), pExpectedData, uData));
	}
	// Otherwise if non-zero, check that the value changed.
	else if (uData)
	{
		// Check that it is not equal to the original data.
		SEOUL_UNITTESTING_ASSERT_NOT_EQUAL(0, memcmp(vData.Data(), pData, uData));
	}
	// Otherwise, make sure the value did *not* change.
	else
	{
		UInt8 aZero[kEncryptionNonceLength];
		memset(aZero, 0, sizeof(aZero));
		SEOUL_UNITTESTING_ASSERT_EQUAL(sizeof(aZero), vData.GetSizeInBytes());
		SEOUL_UNITTESTING_ASSERT_EQUAL(0, memcmp(aZero, vData.Data(), vData.GetSizeInBytes()));
	}

	// Decrypt the data.
	DecryptInPlace(vData.Data(), uData, kauKey, sizeof(kauKey), auNonce);

	// Check that it is now equal to the original data.
	SEOUL_UNITTESTING_ASSERT(0 == memcmp(vData.Data(), pData, uData));
}

void EncryptAESTest::TestBasic()
{
	// Data to use for encrypt testing.
	static const UInt32 kauDataToEncrypt[] =
	{
		0x7f9a6505, 0x4894fdff,
		0x732de639, 0xc86ea46d,
		0x397c5863, 0x2e1efd72,
		0xc23b1275, 0x3a36c757,
		0x8da2ff17, 0xb94b2dc4,
		0x4143d9ff, 0x7dc7cb9f,
		0x4e785877, 0x09d517de,
		0xa21ff245, 0x2cca8d65,
		0xc31539a3, 0x20db12aa,
		0xc092fd07, 0xfc99f989,
		0xd342828c, 0x28a2ffff,
		0x7e7ec4c7, 0xa87b95a5,
		0xa1b744d2, 0xca8f2ac8,
		0x0089f24d, 0x3b5340c6,
		0xa21de157, 0x19286b74,
		0xd197f926, 0xfefcc63e,
	};

	// Initialize the nonce.
	UInt8 auNonce[kEncryptionNonceLength];
	InitializeNonceForEncrypt(auNonce);

	// Run.
	TestCommon(auNonce, (UInt8 const*)kauDataToEncrypt, (UInt32)sizeof(kauDataToEncrypt));
}

void EncryptAESTest::TestZero()
{
	// Initialize the nonce.
	UInt8 auNonce[kEncryptionNonceLength];
	InitializeNonceForEncrypt(auNonce);

	// Run.
	TestCommon(auNonce, nullptr, 0u);
}

// Explicitly a buffer that is smaller than the kEncryptionNonceLength.
void EncryptAESTest::TestOneByte()
{
	// For this test, use a fixed nonce, since we're testing against
	// known expected results.
	static const UInt8 kauNonce[kEncryptionNonceLength] =
	{
		0xb7, 0x68, 0xfc, 0x81, 0x20, 0x64, 0xcc, 0xa1,
		0x81, 0xa7, 0xb8, 0x73, 0x81, 0x7d, 0xcc, 0x87,
	};
	static const UInt8 kauData[1]     = { 0x09 };
	static const UInt8 kauExpected[1] = { 0x69 };

	// Run.
	TestCommon(kauNonce, kauData, sizeof(kauData), kauExpected);
}

// Explicitly a buffer that is smaller than the kEncryptionNonceLength.
void EncryptAESTest::Test15Bytes()
{
	// For this test, use a fixed nonce, since we're testing against
	// known expected results.
	static const UInt8 kauNonce[kEncryptionNonceLength] =
	{
		0x23, 0xd8, 0x9f, 0x69, 0x6d, 0x4f, 0xc5, 0x48,
		0xb0, 0x23, 0xd8, 0x6e, 0xa9, 0x62, 0xee, 0xad,
	};
	static const UInt8 kauData[15] =
	{
		0xd1, 0x2d, 0x37, 0x39, 0xb7, 0x33, 0xaf, 0x83,
		0xc6, 0x29, 0x31, 0xcf, 0xaa, 0x4b, 0x76,
	};
	static const UInt8 kauExpected[15] =
	{
		0xb7, 0x07, 0x84, 0x5b, 0x00, 0xe7, 0xbc, 0xee,
		0xa4, 0x90, 0x5d, 0xcc, 0xac, 0xd5, 0x65,
	};

	// Run.
	TestCommon(kauNonce, kauData, sizeof(kauData), kauExpected);
}

void EncryptAESTest::Test16Bytes()
{
	// For this test, use a fixed nonce, since we're testing against
	// known expected results.
	static const UInt8 kauNonce[kEncryptionNonceLength] =
	{
		0x71, 0x5b, 0x73, 0xd1, 0x8f, 0xbf, 0x8f, 0x10,
		0x1d, 0x05, 0xc4, 0x49, 0xce, 0xce, 0x9d, 0xdd,
	};
	static const UInt8 kauData[16] =
	{
		0x13, 0x8d, 0x91, 0x83, 0x6d, 0xb7, 0xd0, 0xfe,
		0x29, 0x81, 0xf9, 0x37, 0x79, 0xe0, 0xd0, 0xf5,
	};
	static const UInt8 kauExpected[16] =
	{
		0x9e, 0xfd, 0x62, 0xec, 0x56, 0xcf, 0x42, 0x90,
		0xbb, 0xc3, 0x09, 0x10, 0x6c, 0x2d, 0x67, 0x81,
	};

	// Run.
	TestCommon(kauNonce, kauData, sizeof(kauData), kauExpected);
}

void EncryptAESTest::Test17Bytes()
{
	// For this test, use a fixed nonce, since we're testing against
	// known expected results.
	static const UInt8 kauNonce[kEncryptionNonceLength] =
	{
		0x85, 0x78, 0x48, 0x0a, 0x3c, 0x18, 0x78, 0x8f,
		0xf0, 0xc6, 0x50, 0x00, 0xaf, 0x50, 0x2c, 0x7d,
	};
	static const UInt8 kauData[17] =
	{
		0xc9, 0x01, 0xfc, 0x9f, 0xc8, 0xab, 0x36, 0x67,
		0x72, 0x95, 0x34, 0xc8, 0x8d, 0xd0, 0x10, 0x19,
		0x0f,
	};
	static const UInt8 kauExpected[17] =
	{
		0x6c, 0x15, 0x91, 0x6d, 0x79, 0xc5, 0x96, 0x3e,
		0x4a, 0x3b, 0x9e, 0xae, 0x32, 0xaa, 0x75, 0x2e,
		0xd9,
	};

	// Run.
	TestCommon(kauNonce, kauData, sizeof(kauData), kauExpected);
}

void EncryptAESTest::Test31Bytes()
{
	// For this test, use a fixed nonce, since we're testing against
	// known expected results.
	static const UInt8 kauNonce[kEncryptionNonceLength] =
	{
		0x9c, 0xf4, 0x9b, 0x3b, 0xa4, 0x30, 0x2f, 0x0d,
		0x59, 0x3b, 0x13, 0xc6, 0x07, 0x76, 0x73, 0x75,
	};
	static const UInt8 kauData[31] =
	{
		0x79, 0x1a, 0x31, 0x0f, 0xfa, 0x05, 0xa3, 0xb8,
		0xd5, 0x82, 0x3b, 0xce, 0x25, 0x92, 0xaa, 0x92,
		0x16, 0xe4, 0x25, 0x65, 0xdf, 0x06, 0x35, 0xf1,
		0xa2, 0x70, 0x49, 0x38, 0x60, 0x5c, 0x0a,
	};
	static const UInt8 kauExpected[31] =
	{
		0x6c, 0xdb, 0xd7, 0x5b, 0xdb, 0x3e, 0xe7, 0x48,
		0x9a, 0x9b, 0x1e, 0x6a, 0xfd, 0x45, 0xb3, 0x5c,
		0xb9, 0x3f, 0x6c, 0x40, 0x12, 0xfa, 0x6a, 0x6e,
		0x99, 0xec, 0x8b, 0x8d, 0x6a, 0x16, 0xaf,
	};

	// Run.
	TestCommon(kauNonce, kauData, sizeof(kauData), kauExpected);
}

void EncryptAESTest::Test32Bytes()
{
	// For this test, use a fixed nonce, since we're testing against
	// known expected results.
	static const UInt8 kauNonce[kEncryptionNonceLength] =
	{
		0x7a, 0x67, 0x25, 0xce, 0xab, 0x9c, 0xce, 0xe3,
		0x0e, 0x8a, 0x96, 0xf2, 0x0c, 0x9c, 0xd9, 0x7d,
	};
	static const UInt8 kauData[32] =
	{
		0xc1, 0x2b, 0x68, 0x61, 0x82, 0xdb, 0x0b, 0xaa,
		0xd5, 0xdb, 0x5e, 0x7d, 0x49, 0x57, 0x45, 0x38,
		0x0e, 0x38, 0x43, 0x50, 0xc8, 0x3d, 0x67, 0xa1,
		0x9c, 0x2b, 0xd8, 0x34, 0xdb, 0xd5, 0xde, 0xdb,
	};
	static const UInt8 kauExpected[32] =
	{
		0x26, 0x6b, 0xb0, 0xa2, 0xc7, 0x30, 0x25, 0xb1,
		0x23, 0x92, 0xe3, 0x5b, 0xf5, 0xa8, 0x63, 0x98,
		0x05, 0xb8, 0x92, 0xa8, 0xc0, 0x87, 0xe4, 0xd4,
		0x0b, 0xc9, 0x20, 0x0a, 0x9d, 0x78, 0x02, 0x26,
	};

	// Run.
	TestCommon(kauNonce, kauData, sizeof(kauData), kauExpected);
}

void EncryptAESTest::Test33Bytes()
{
	// For this test, use a fixed nonce, since we're testing against
	// known expected results.
	static const UInt8 kauNonce[kEncryptionNonceLength] =
	{
		0xc8, 0xe8, 0x82, 0xc0, 0x14, 0xfe, 0x76, 0x56,
		0xe2, 0x8f, 0x17, 0xc0, 0x65, 0x5a, 0x63, 0x85,
	};
	static const UInt8 kauData[33] =
	{
		0x92, 0xc2, 0x08, 0x17, 0xaa, 0x2c, 0xa2, 0x00,
		0xd8, 0x4f, 0x31, 0xf8, 0xf9, 0x59, 0x22, 0xda,
		0x99, 0x6d, 0x10, 0x02, 0x7a, 0x61, 0x6d, 0x63,
		0xf5, 0x5a, 0x9e, 0xb3, 0x04, 0x4e, 0x2e, 0xa5,
		0xa2,
	};
	static const UInt8 kauExpected[33] =
	{
		0xb1, 0x30, 0x33, 0x40, 0x2b, 0x63, 0xfe, 0x11,
		0xe9, 0x59, 0x74, 0xdf, 0x17, 0x16, 0xb7, 0xe0,
		0x1a, 0x09, 0xcd, 0x25, 0xaa, 0x8f, 0x5b, 0xf9,
		0x74, 0xf5, 0x37, 0x84, 0x6c, 0xa3, 0x36, 0xfe,
		0x3f,
	};

	// Run.
	TestCommon(kauNonce, kauData, sizeof(kauData), kauExpected);
}

static void TestSHA512Common(UInt8 const* pData, UInt32 uData, UInt8 const* pExpected = nullptr)
{
	UInt8 aResult[kSHA512DigestLength];
	memset(aResult, 0, sizeof(aResult));
	EncryptAES::SHA512Digest(pData, uData, aResult);

	// Check against expected.
	SEOUL_UNITTESTING_ASSERT(pExpected);
	SEOUL_UNITTESTING_ASSERT_EQUAL(0, memcmp(aResult, pExpected, sizeof(aResult)));
}

void EncryptAESTest::TestSHA512DigestZero()
{
	static const UInt8 kauExpected[kSHA512DigestLength] =
	{
		0xcf, 0x83, 0xe1, 0x35, 0x7e, 0xef, 0xb8, 0xbd,
		0xf1, 0x54, 0x28, 0x50, 0xd6, 0x6d, 0x80, 0x07,
		0xd6, 0x20, 0xe4, 0x05, 0x0b, 0x57, 0x15, 0xdc,
		0x83, 0xf4, 0xa9, 0x21, 0xd3, 0x6c, 0xe9, 0xce,
		0x47, 0xd0, 0xd1, 0x3c, 0x5d, 0x85, 0xf2, 0xb0,
		0xff, 0x83, 0x18, 0xd2, 0x87, 0x7e, 0xec, 0x2f,
		0x63, 0xb9, 0x31, 0xbd, 0x47, 0x41, 0x7a, 0x81,
		0xa5, 0x38, 0x32, 0x7a, 0xf9, 0x27, 0xda, 0x3e,
	};

	TestSHA512Common(nullptr, 0u, kauExpected);
}

void EncryptAESTest::TestSHA512DigestOneByte()
{
	static const UInt8 kauData[1] =
	{
		0x09,
	};
	static const UInt8 kauExpected[kSHA512DigestLength] =
	{
		0xf2, 0x7b, 0x5b, 0xf8, 0xd3, 0x5e, 0xa2, 0xbb,
		0xbb, 0x6c, 0x0f, 0x9f, 0xef, 0x89, 0xd8, 0x83,
		0x41, 0x5b, 0x5a, 0xdb, 0xd6, 0xa8, 0x40, 0x30,
		0xcb, 0x1f, 0x35, 0xe6, 0xa6, 0xc0, 0x26, 0xe6,
		0x5c, 0x60, 0xfb, 0x99, 0xf5, 0x62, 0xf7, 0xeb,
		0x9f, 0x77, 0xf3, 0xde, 0xc5, 0x00, 0x14, 0x73,
		0x44, 0x1d, 0x2c, 0x55, 0x86, 0xb5, 0x4d, 0x9b,
		0x99, 0x9c, 0xf4, 0xbd, 0x79, 0x0e, 0x4c, 0x56,
	};

	TestSHA512Common(kauData, sizeof(kauData), kauExpected);
}

void EncryptAESTest::TestSHA512Digest63Bytes()
{
	static const UInt8 kauData[63] =
	{
		0x61, 0x81, 0x31, 0x80, 0x1a, 0x2e, 0xb9, 0xcb,
		0xbc, 0xea, 0xdd, 0x00, 0xb7, 0xe6, 0x2b, 0x97,
		0xf6, 0xdd, 0x52, 0x56, 0x30, 0xe6, 0xd4, 0x3a,
		0x7d, 0x08, 0xbc, 0x5a, 0x17, 0x46, 0x06, 0x94,
		0x12, 0xe2, 0x6e, 0x98, 0xc9, 0x56, 0x3f, 0xee,
		0x42, 0x9b, 0x87, 0x15, 0xfc, 0xa6, 0x3d, 0x22,
		0x19, 0x19, 0x2b, 0xfe, 0xf9, 0x92, 0x22, 0x6a,
		0xa5, 0xdb, 0xff, 0x10, 0x4a, 0xba, 0x73,
	};
	static const UInt8 kauExpected[kSHA512DigestLength] =
	{
		0x16, 0xf4, 0x61, 0x58, 0xc9, 0x3a, 0x9e, 0xa1,
		0xe2, 0xfd, 0x94, 0x17, 0xa3, 0x83, 0x77, 0xa9,
		0x7c, 0x4d, 0x66, 0x1a, 0x38, 0xb2, 0x78, 0xd6,
		0x19, 0x4e, 0x30, 0x4f, 0x4e, 0x32, 0x03, 0x34,
		0x6a, 0x90, 0x25, 0x9f, 0xe5, 0xbb, 0x2d, 0x29,
		0x77, 0x12, 0x52, 0x8f, 0xb7, 0x4a, 0x3e, 0x6e,
		0xe2, 0xd7, 0xb8, 0x8f, 0x8f, 0xa5, 0x32, 0xea,
		0x15, 0x59, 0x51, 0x65, 0xeb, 0x81, 0x28, 0x54,
	};

	TestSHA512Common(kauData, sizeof(kauData), kauExpected);
}

void EncryptAESTest::TestSHA512Digest64Bytes()
{
	static const UInt8 kauData[64] =
	{
		0x91, 0xac, 0xa3, 0x47, 0x2f, 0x03, 0xb5, 0x6e,
		0x0b, 0xc6, 0xfc, 0x64, 0x3c, 0x07, 0x2b, 0x97,
		0x9c, 0x06, 0x1d, 0xab, 0x1c, 0xca, 0x00, 0x67,
		0xde, 0xd9, 0xff, 0x40, 0xec, 0x36, 0x7c, 0x20,
		0xb2, 0x55, 0x30, 0x3a, 0x97, 0xc7, 0x4d, 0x5a,
		0xd8, 0x00, 0x1c, 0xc6, 0x8b, 0x34, 0x79, 0x8a,
		0xc8, 0xdc, 0x09, 0x0c, 0xcf, 0xc7, 0x0b, 0xcd,
		0x61, 0x22, 0xb6, 0x4e, 0x62, 0xbb, 0x94, 0xf8,
	};
	static const UInt8 kauExpected[kSHA512DigestLength] =
	{
		0xba, 0xa6, 0x19, 0x97, 0x19, 0x89, 0xbe, 0xae,
		0xdf, 0xfd, 0x79, 0x83, 0xe1, 0xa3, 0x7f, 0xad,
		0xe1, 0x0f, 0xf4, 0x8f, 0x25, 0xe7, 0xea, 0xe0,
		0xce, 0xac, 0xd1, 0x6c, 0xdf, 0xf4, 0xb2, 0x9f,
		0x7d, 0x5f, 0xd5, 0x49, 0x5e, 0xac, 0x5f, 0x5a,
		0x2e, 0x55, 0x2a, 0x73, 0x6f, 0x67, 0xc5, 0x03,
		0xe3, 0xd0, 0x99, 0xb9, 0xe0, 0xff, 0xf5, 0x1c,
		0x16, 0x9e, 0xeb, 0x19, 0x5d, 0x4b, 0x74, 0x6b,
	};

	TestSHA512Common(kauData, sizeof(kauData), kauExpected);
}

void EncryptAESTest::TestSHA512Digest65Bytes()
{
	static const UInt8 kauData[65] =
	{
		0x0c, 0x92, 0x1c, 0x8f, 0xdb, 0x0f, 0x84, 0x70,
		0x07, 0x6a, 0x6b, 0x75, 0x37, 0xa7, 0xc5, 0x17,
		0x72, 0x79, 0xc3, 0x75, 0x22, 0xe1, 0x93, 0x1d,
		0x65, 0xd0, 0x4d, 0xb8, 0xca, 0x62, 0xe0, 0xbe,
		0x29, 0xd1, 0xc4, 0x2f, 0x66, 0x2e, 0x28, 0x1b,
		0x2b, 0xf3, 0xc1, 0x60, 0xf3, 0x28, 0x3b, 0x8d,
		0x65, 0x82, 0x79, 0x7f, 0xf5, 0x8c, 0x2f, 0x77,
		0xfb, 0x18, 0xac, 0x94, 0x66, 0xbd, 0xf4, 0x72,
		0xae,
	};
	static const UInt8 kauExpected[kSHA512DigestLength] =
	{
		0x7c, 0x9d, 0x19, 0x39, 0x37, 0xc4, 0x1a, 0x7c,
		0xec, 0x39, 0x80, 0x95, 0x26, 0xab, 0x3c, 0xac,
		0x9b, 0x25, 0x25, 0x96, 0x47, 0xbf, 0x65, 0xcb,
		0x22, 0x24, 0xab, 0xd4, 0xda, 0xcc, 0x5a, 0xd0,
		0xc9, 0xac, 0xf6, 0xb6, 0x7c, 0x52, 0x9b, 0x7d,
		0xd5, 0x39, 0xb7, 0x5c, 0xa7, 0xd2, 0x27, 0xba,
		0x88, 0x9c, 0x05, 0x93, 0xcb, 0xf6, 0x30, 0x35,
		0x57, 0x59, 0xf2, 0xe3, 0x8a, 0x31, 0x08, 0x62,
	};

	TestSHA512Common(kauData, sizeof(kauData), kauExpected);
}

void EncryptAESTest::TestSHA512Digest127Bytes()
{
	static const UInt8 kauData[127] =
	{
		0xc2, 0x2c, 0x3b, 0x11, 0xf4, 0x27, 0x0b, 0x64,
		0xc1, 0xcd, 0xa0, 0x62, 0xc9, 0xd2, 0x0f, 0xb0,
		0xfe, 0x39, 0x27, 0x8a, 0xe9, 0x00, 0x40, 0x66,
		0x85, 0x3f, 0x7f, 0x37, 0xff, 0x20, 0x7a, 0xb5,
		0x9b, 0x2b, 0xbc, 0x85, 0x58, 0x46, 0x8c, 0x92,
		0x79, 0x10, 0xbb, 0xa1, 0x23, 0xf3, 0xfd, 0x6e,
		0x5e, 0x76, 0xb0, 0xac, 0x5e, 0xde, 0x47, 0x92,
		0x96, 0xa9, 0xac, 0xba, 0xe2, 0xed, 0x48, 0x56,
		0x1a, 0xaa, 0x7f, 0xaa, 0x74, 0x2d, 0x39, 0xf8,
		0x06, 0x3f, 0x9a, 0x1f, 0xaa, 0x9f, 0x47, 0xf3,
		0xc9, 0x6f, 0x08, 0x02, 0x90, 0x1d, 0x6a, 0x12,
		0xb5, 0xa4, 0x87, 0xb9, 0x8d, 0x05, 0x98, 0xce,
		0xf1, 0x59, 0x85, 0x75, 0xd3, 0xab, 0xac, 0x02,
		0xd9, 0xcb, 0x44, 0x08, 0x99, 0x3f, 0x71, 0x15,
		0x00, 0xe3, 0xb4, 0x8a, 0x62, 0x14, 0x2c, 0x4e,
		0x15, 0x86, 0x67, 0xb2, 0x66, 0x4a, 0x1b,
	};
	static const UInt8 kauExpected[kSHA512DigestLength] =
	{
		0x87, 0x70, 0x21, 0x23, 0xb0, 0x2c, 0xe6, 0x84,
		0x29, 0x84, 0xb9, 0x93, 0x68, 0x5b, 0xf0, 0x35,
		0xf8, 0x41, 0x29, 0xb4, 0xc5, 0xf7, 0x68, 0x03,
		0x46, 0x4c, 0x5f, 0x63, 0x02, 0x9d, 0xfa, 0xb8,
		0xf5, 0x03, 0x10, 0xe7, 0x82, 0x53, 0xc3, 0x41,
		0x9e, 0x5a, 0x59, 0x6c, 0x64, 0x6b, 0x75, 0xcc,
		0x3c, 0x9c, 0xb0, 0x28, 0x5b, 0xfe, 0xcc, 0x7c,
		0x2a, 0xca, 0x09, 0xa9, 0x9b, 0xc3, 0xce, 0x51,
	};

	TestSHA512Common(kauData, sizeof(kauData), kauExpected);
}

void EncryptAESTest::TestSHA512Digest128Bytes()
{
	static const UInt8 kauData[128] =
	{
		0xc9, 0x50, 0x4c, 0x7b, 0xda, 0x85, 0x0d, 0xb9,
		0x35, 0x8e, 0x66, 0xda, 0xf0, 0x9a, 0x50, 0x35,
		0xd1, 0x0a, 0x05, 0xf0, 0x9c, 0x1a, 0x64, 0xcb,
		0x36, 0xb5, 0x44, 0x5f, 0x5d, 0xd4, 0x10, 0x7a,
		0xdd, 0x82, 0x0b, 0x46, 0xe0, 0x4f, 0x9f, 0x91,
		0x45, 0x9f, 0x1b, 0xec, 0xee, 0xc5, 0x81, 0xdc,
		0xda, 0x01, 0x7f, 0x1a, 0xf0, 0xa5, 0xcc, 0x33,
		0x98, 0xd5, 0xe8, 0x06, 0xaf, 0xce, 0xe2, 0x56,
		0x19, 0x36, 0x2e, 0xe2, 0x50, 0xab, 0xb8, 0xda,
		0x4f, 0x83, 0xb4, 0x82, 0x3a, 0xa1, 0x04, 0x22,
		0x4d, 0x39, 0x8c, 0x53, 0xf2, 0x9a, 0xc6, 0x30,
		0xe3, 0x8d, 0xe6, 0x97, 0xce, 0xf2, 0x1a, 0x30,
		0xbf, 0xa3, 0xc5, 0x6d, 0xab, 0x19, 0x01, 0xcb,
		0x80, 0x33, 0x58, 0xef, 0x94, 0x3b, 0x69, 0xd6,
		0x3f, 0x34, 0xe8, 0xa3, 0xcb, 0x86, 0x92, 0x18,
		0x0d, 0x80, 0xd8, 0x61, 0xf6, 0x80, 0x89, 0xa8,
	};
	static const UInt8 kauExpected[kSHA512DigestLength] =
	{
		0x81, 0xc9, 0x14, 0x9c, 0x05, 0x4f, 0x41, 0x16,
		0x56, 0xd7, 0x25, 0x1e, 0x96, 0x3c, 0x0e, 0xdf,
		0x24, 0xfe, 0x6b, 0xa3, 0xff, 0xbb, 0x3a, 0x29,
		0x47, 0xca, 0xab, 0xf9, 0xcf, 0xa1, 0x98, 0x7b,
		0x97, 0xdf, 0x22, 0xf7, 0xeb, 0x7c, 0x7d, 0x3b,
		0xed, 0x8a, 0x67, 0x0b, 0xac, 0xa0, 0x6f, 0xab,
		0x57, 0x71, 0x98, 0x0b, 0x29, 0xd5, 0x0d, 0x43,
		0x01, 0xd2, 0x02, 0x10, 0xb7, 0x9a, 0x34, 0x3d,
	};

	TestSHA512Common(kauData, sizeof(kauData), kauExpected);
}

void EncryptAESTest::TestSHA512Digest129Bytes()
{
	static const UInt8 kauData[129] =
	{
		0xe5, 0x7f, 0xe9, 0xd3, 0xa1, 0x95, 0x69, 0x5f,
		0xe1, 0x24, 0x55, 0x6f, 0x98, 0xb2, 0x6d, 0x67,
		0x6d, 0x18, 0x17, 0xef, 0x17, 0x72, 0x94, 0x6e,
		0x0c, 0x41, 0xe1, 0x2a, 0x5f, 0x89, 0xbf, 0x79,
		0x64, 0xcb, 0xd8, 0xf5, 0x45, 0x28, 0xa1, 0x5c,
		0x68, 0x02, 0xbd, 0x6c, 0x43, 0xa6, 0x0f, 0xb2,
		0x91, 0x86, 0x9b, 0x8c, 0xb0, 0xcc, 0x0c, 0x04,
		0xbf, 0x20, 0xb0, 0xbf, 0xd4, 0x5a, 0x4d, 0xe0,
		0xcc, 0x21, 0x7e, 0x40, 0x79, 0xab, 0x4e, 0x81,
		0x03, 0xc4, 0x1a, 0xf1, 0xd1, 0xaa, 0xf1, 0x04,
		0x07, 0x2e, 0x26, 0x01, 0xed, 0x70, 0xa3, 0xb3,
		0x3d, 0xf1, 0x54, 0xc3, 0x07, 0x63, 0x3b, 0x5f,
		0x02, 0xbf, 0x95, 0xa0, 0xa3, 0xa3, 0xd3, 0x93,
		0x06, 0x00, 0x29, 0x80, 0x95, 0xa3, 0xc6, 0x13,
		0xd2, 0xf4, 0xb5, 0x82, 0x0b, 0xa5, 0xe6, 0x68,
		0xc5, 0x58, 0x20, 0x30, 0x90, 0xb7, 0xa4, 0x42,
		0xf1,
	};
	static const UInt8 kauExpected[kSHA512DigestLength] =
	{
		0x9b, 0xec, 0x52, 0x67, 0x9f, 0xe0, 0x6d, 0x41,
		0xde, 0x7f, 0xde, 0xd6, 0x0a, 0x71, 0xff, 0x24,
		0x5e, 0x5e, 0x5e, 0xe2, 0x8c, 0xd0, 0xd0, 0xf0,
		0xfe, 0x23, 0x91, 0xe1, 0xa0, 0x26, 0xee, 0x10,
		0xb3, 0x73, 0xd0, 0xee, 0x14, 0x16, 0x6f, 0x54,
		0x7d, 0x89, 0xc7, 0x24, 0xea, 0xd8, 0x3c, 0xa2,
		0x79, 0x24, 0x5e, 0x32, 0x92, 0x46, 0x35, 0x0d,
		0x1a, 0x8a, 0x0b, 0xe3, 0x7a, 0x60, 0x3e, 0xc0,
	};

	TestSHA512Common(kauData, sizeof(kauData), kauExpected);
}

#endif // /SEOUL_UNIT_TESTS

} // namespace Seoul
